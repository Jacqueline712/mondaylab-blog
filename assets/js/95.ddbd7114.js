(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{648:function(_,v,t){"use strict";t.r(v);var e=t(13),r=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"⚾-序言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⚾-序言"}},[_._v("#")]),_._v(" ⚾ 序言")]),_._v(" "),t("p",[_._v("大家都知道，计算机网络是前端面试中非常爱考的面试题了，不得不说是八股文的经典。在周一刚开始接触计网时，也是一直看到类似于"),t("strong",[_._v("三次握手四次握手之类")]),_._v("的问题。刚开始我是知识比较浮于表面，对计网知识的了解就一直停留在知道有那么一些内容。但随着学习的深入，慢慢地我觉得，在了解一个东西之前，不仅仅要知道它是什么？还要知道它为什么出现？它的出现又解决了什么问题？这样的学习会更加有利于将其运用到我们的日常开发中。")]),_._v(" "),t("p",[_._v("在下面这篇文章中，将分享在秋招备试的过程中我学习计网的一个过程，以及自己整理的关于计网常考的一些面经题。")]),_._v(" "),t("p",[_._v("下面开始进入今天文章的讲解~😜")]),_._v(" "),t("h1",{attrs:{id:"🏐-一、基础知识环节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏐-一、基础知识环节"}},[_._v("#")]),_._v(" 🏐 一、基础知识环节")]),_._v(" "),t("h2",{attrs:{id:"_1、专栏学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、专栏学习"}},[_._v("#")]),_._v(" 1、专栏学习")]),_._v(" "),t("p",[_._v("刚开始面对的是学校发的一本非常厚重的书，u1s1，面对那"),t("strong",[_._v("接近 1000 页")]),_._v("的书，我的心里其实蛮奔溃的。后面在机缘巧合下，在一个公众号上看到了一位前端博主的文章，"),t("strong",[_._v("零一")]),_._v("。紧接着在 "),t("code",[_._v("csdn")]),_._v(" 上看到他写的很多精选专栏，看完他的博客之后，才下意识地感觉……原来还有写的这么好的文章。这一段废话有点多……以后有机会再谈。")]),_._v(" "),t("p",[_._v("我当时先学的是零一博主的 "),t("code",[_._v("TCP")]),_._v(" 专栏，博主的每一篇文章对小白都是极其友好类型，非常地通俗易懂。下面附上 "),t("code",[_._v("TCP")]),_._v(" 专栏相关的文章链接 👇")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[_._v("序号")]),_._v(" "),t("th",{staticStyle:{"text-align":"center"}},[_._v("文章")]),_._v(" "),t("th",{staticStyle:{"text-align":"center"}},[_._v("链接")])])]),_._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[_._v("1")])]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("【TCP/IP】概述网络分层以及协议介绍")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("a",{attrs:{href:"https://lpyexplore.blog.csdn.net/article/details/108925528",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://lpyexplore.blog.csdn.net/article/details/108925528"),t("OutboundLink")],1)])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[_._v("2")])]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("【TCP/IP】IP 地址的划分及其分类")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("a",{attrs:{href:"https://lpyexplore.blog.csdn.net/article/details/108935757",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://lpyexplore.blog.csdn.net/article/details/108935757"),t("OutboundLink")],1)])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[_._v("3")])]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("【TCP/IP】链路层的简单认识")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("a",{attrs:{href:"https://lpyexplore.blog.csdn.net/article/details/109248705",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://lpyexplore.blog.csdn.net/article/details/109248705"),t("OutboundLink")],1)])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[_._v("4")])]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("【TCP/IP】详解 DNS 具体作用过程")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("a",{attrs:{href:"https://lpyexplore.blog.csdn.net/article/details/109128967",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://lpyexplore.blog.csdn.net/article/details/109128967"),t("OutboundLink")],1)])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[_._v("5")])]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("【TCP/IP】图解 TCP 的通信机制")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("a",{attrs:{href:"https://lpyexplore.blog.csdn.net/article/details/109133096",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://lpyexplore.blog.csdn.net/article/details/109133096"),t("OutboundLink")],1)])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[t("strong",[_._v("6")])]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("专栏传送门")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[t("a",{attrs:{href:"https://blog.csdn.net/l_ppp/category_10448348.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://blog.csdn.net/l_ppp/category_10448348.html"),t("OutboundLink")],1)])])])]),_._v(" "),t("p",[_._v("以上文章可以按顺序学哦~")]),_._v(" "),t("h2",{attrs:{id:"_2、书籍学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、书籍学习"}},[_._v("#")]),_._v(" 2、书籍学习")]),_._v(" "),t("p",[_._v("学习完上面的 5 篇博客之后，前后大概花了"),t("strong",[_._v("15-20h")]),_._v("左右的时间。看完之后，算是稍微入了个门。但是计网的内容远远不止这些，所以，在学习了博客文章之后，我继续用书籍来深挖知识点。")]),_._v(" "),t("p",[_._v("搜寻了知乎和豆瓣，还有身边的小伙伴的推荐，大家都说对前端比较友好的书籍是： "),t("strong",[_._v("《图解 TCP/IP》")]),_._v(" 这一本书。"),t("strong",[_._v("看下图 👇")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/9c774a19309149eeb766e9befe1d1611.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"计网书籍推荐"}})]),_._v(" "),t("p",[_._v("这本书以图解的形式，讲解了计算机网络的大部分知识。可以说对入门选手和对看书就容易犯困的小伙伴来说实在是太太太友好了……强烈安利！")]),_._v(" "),t("p",[_._v("看完这本书之后，应对面试基本上算是足够了。如果还有想要深挖的小伙伴，可以去看深色封面的那本书……只是听过，但是我没有看过，所以这里只简单概括一下~")]),_._v(" "),t("p",[_._v("有了基础知识预备之后，就可以看一下一些面经题目，尝试着回顾和用自己的话语来回答。同时在文章下面的内容中，我也将对我遇到的系列题目进行归纳总结~")]),_._v(" "),t("h1",{attrs:{id:"⚽-二、思维导图环节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#⚽-二、思维导图环节"}},[_._v("#")]),_._v(" ⚽ 二、思维导图环节")]),_._v(" "),t("p",[_._v("我们先用一张思维导图来了解该系列面经题的知识体系。"),t("strong",[_._v("具体如下图 👇")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/4f6600a6e7e34512a5830f2dc9cb6f84.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"计算机网络面试复习框架"}})]),_._v(" "),t("p",[_._v("思维导图收入囊中，下面开始分享面经题的解答流程~")]),_._v(" "),t("h1",{attrs:{id:"🎳-三、osi-七层模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🎳-三、osi-七层模型"}},[_._v("#")]),_._v(" 🎳 三、OSI 七层模型")]),_._v(" "),t("h2",{attrs:{id:"_1、osi-模型是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、osi-模型是什么"}},[_._v("#")]),_._v(" 1、OSI 模型是什么？")]),_._v(" "),t("p",[t("code",[_._v("OSI")]),_._v(" 七层模型，即网络通信的七个层次。之所以将其分为七个层次，是为了让开发人员可以在不同领域分别实现整个系统的不同部分。就像一个非常庞大的工程，每个员工都有自己擅长的岗位和专门负责的工作。")]),_._v(" "),t("p",[_._v("那么七个层次主要包括：物理层、数据链路层、网络层、传输层、会话层、表示层以及应用层。")]),_._v(" "),t("p",[t("strong",[_._v("接下来谈论各个层次的作用。")])]),_._v(" "),t("p",[t("strong",[_._v("第一个，应用层")]),_._v("。应用层是为应用程序提供服务并规定应用程序中通信相关的细节。包括文件传输、电子邮件、远程登录（虚拟终端）等协议。")]),_._v(" "),t("p",[t("strong",[_._v("第二个，表示层")]),_._v("。表示层是将应用处理的信息转换为适合网络传输的格式，或将来自下一层的数据转换为上一层能够处理的格式。因此它主要负责数据格式的转换。")]),_._v(" "),t("p",[t("strong",[_._v("第三个，会话层")]),_._v("。会话层是负责建立和断开通信连接，以及数据的分割等数据传输相关的管理。")]),_._v(" "),t("p",[t("strong",[_._v("第四个，传输层")]),_._v("。传输层起着可靠传输的作用，它只在通信双方的节点上进行处理，而无需在路由器上处理。")]),_._v(" "),t("p",[t("strong",[_._v("第五个，网络层")]),_._v("。网络层将数据传输到"),t("strong",[_._v("目标地址")]),_._v("上，目标地址可以是多个网络通过路由器连接而成的某一个地址。因此这一层主要"),t("strong",[_._v("负责寻址和路由选择")]),_._v("。")]),_._v(" "),t("p",[t("strong",[_._v("第六个，数据链路层")]),_._v("。数据链路层负责物理层面上互联的、结点之间的通信传输。")]),_._v(" "),t("p",[t("strong",[_._v("第七个，物理层")]),_._v("。负责 0、1 比特流（0、1 序列）与电压的高低、光的闪灭之间的互换。")]),_._v(" "),t("h2",{attrs:{id:"_2、osi-七层模型遵循原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、osi-七层模型遵循原则"}},[_._v("#")]),_._v(" 2、OSI 七层模型遵循原则")]),_._v(" "),t("p",[t("strong",[_._v("OSI 参考模型遵循五个原则：")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("各个层级之间有清晰的边界，便于理解各个层级的功能；")])]),_._v(" "),t("li",[t("p",[_._v("每个层实现的功能不一样，并且不会互相影响；")])]),_._v(" "),t("li",[t("p",[_._v("层与层之间是"),t("strong",[_._v("服务与被服务")]),_._v("关系；")])]),_._v(" "),t("li",[t("p",[_._v("层次划分有利于国际标准协议的制定；")])]),_._v(" "),t("li",[t("p",[_._v("层次数目越多，就越能避免各个层之间的"),t("strong",[_._v("功能重复")]),_._v("。")])])]),_._v(" "),t("h1",{attrs:{id:"🏏-四、tcp-与-udp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏏-四、tcp-与-udp"}},[_._v("#")]),_._v(" 🏏 四、TCP 与 UDP")]),_._v(" "),t("h2",{attrs:{id:"_1、tcp-与-udp-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、tcp-与-udp-的区别"}},[_._v("#")]),_._v(" 1、TCP 与 UDP 的区别")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[_._v("TCP")]),_._v(" "),t("th",{staticStyle:{"text-align":"center"}},[_._v("UDP")])])]),_._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("TCP 在传输层上")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("UDP 在传输层上")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("面向连接")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("面向无连接")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("面向字节流")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("面向报文")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("一对一通信")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("一对一、一对多、多对一、多对多通信")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("需要建立可靠的连接")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("不需要建立可靠的连接")])]),_._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[_._v("适用于可靠传输的应用：web browsing、email、文件传输等")]),_._v(" "),t("td",{staticStyle:{"text-align":"center"}},[_._v("适用于实时应用：线上游戏、直播、IP 电话、语音会议等")])])])]),_._v(" "),t("p",[t("strong",[_._v("白话文回答：")])]),_._v(" "),t("ul",[t("li",[t("code",[_._v("TCP")]),_._v(" 是面向连接的，"),t("code",[_._v("UDP")]),_._v(" 是面向无连接的，即"),t("strong",[_._v("发送数据前")]),_._v("不需要建立连接。")]),_._v(" "),t("li",[t("code",[_._v("TCP")]),_._v(" 提供可靠的传输服务，通过 "),t("code",[_._v("TCP")]),_._v(" 连接传送的数据，无差错，不丢失，不重复，且按序到达，而 "),t("code",[_._v("UDP")]),_._v(" 则是尽最大努力交付，不保证可靠传输。")]),_._v(" "),t("li",[_._v("因此，因为 "),t("code",[_._v("TCP")]),_._v(" 可靠，面向连接且不会丢失数据，所以 "),t("code",[_._v("TCP")]),_._v(" 适合大数据量的交换。")]),_._v(" "),t("li",[t("code",[_._v("TCP")]),_._v(" 面向字节流，实际是 "),t("code",[_._v("TCP")]),_._v(" 把数据看成是"),t("strong",[_._v("一连串无结构的字节流")]),_._v("； "),t("code",[_._v("UDP")]),_._v(" 则是面向报文的，且没有拥塞控制，因此，网络出现拥堵的情况下不会使原主机的发送速率降低，但是这个过程会出现丢包，所以它对实时的应用很有用，比如 "),t("code",[_._v("IP")]),_._v(" 电话、视频会议和直播等等。")]),_._v(" "),t("li",[_._v("每一条 "),t("code",[_._v("TCP")]),_._v(" 连接，只能是一对一的，"),t("code",[_._v("UDP")]),_._v(" 则支持一对一、一对多、多对一和多对多的交互通信。")]),_._v(" "),t("li",[t("code",[_._v("TCP")]),_._v(" 的首部开销为"),t("strong",[_._v("20 字节")]),_._v("，而 "),t("code",[_._v("UDP")]),_._v(" 的只有"),t("strong",[_._v("8 字节")]),_._v("。")]),_._v(" "),t("li",[_._v("综上所述，"),t("code",[_._v("TCP")]),_._v(" 是面向连接的可靠性传输，而 "),t("code",[_._v("UDP")]),_._v(" 则是不可靠的。")])]),_._v(" "),t("p",[_._v("注： "),t("code",[_._v("TCP")]),_._v(" 需建立三次连接、且 "),t("code",[_._v("TCP")]),_._v(" 的包可以进行分组发送，会产生建立连接开销和分组开销。")]),_._v(" "),t("h2",{attrs:{id:"_2、tcp-udp-的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、tcp-udp-的优缺点"}},[_._v("#")]),_._v(" 2、TCP/UDP 的优缺点")]),_._v(" "),t("h3",{attrs:{id:"_1-tcp-的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp-的优点"}},[_._v("#")]),_._v(" （1）TCP 的优点")]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("可靠、稳定。")])])]),_._v(" "),t("li",[t("p",[t("code",[_._v("TCP")]),_._v(" 的可靠体现在 "),t("code",[_._v("TCP")]),_._v(" 在传递数据之前，会有三次握手来建立连接；")])]),_._v(" "),t("li",[t("p",[_._v("且在数据传递时，有"),t("strong",[_._v("确认")]),_._v("、"),t("strong",[_._v("窗口")]),_._v("、"),t("strong",[_._v("重传")]),_._v("、"),t("strong",[_._v("拥塞控制")]),_._v("等机制；")])]),_._v(" "),t("li",[t("p",[_._v("在数据完成传送以后，还会通过断开连接来节约资源。")])])]),_._v(" "),t("h3",{attrs:{id:"_2-tcp-的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp-的缺点"}},[_._v("#")]),_._v(" （2）TCP 的缺点")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("慢、效率低、占用系统资源高，易被攻击。")])]),_._v(" "),t("li",[t("code",[_._v("TCP")]),_._v(" 在传递数据前，要先建立连接，这会消耗时间；")]),_._v(" "),t("li",[_._v("且在传递数据时，确认机制、重传机制、拥塞控制机制等都会消耗大量的时间；")]),_._v(" "),t("li",[_._v("同时要在每台设备上维护所有的传输连接，事实上，每个连接都会占用系统的 "),t("code",[_._v("CPU")]),_._v(" 、内存等硬件资源；")]),_._v(" "),t("li",[_._v("而且，因为 "),t("code",[_._v("TCP")]),_._v(" 有三次握手机制，这些也会导致 "),t("code",[_._v("TCP")]),_._v(" 容易被人利用，实现 "),t("code",[_._v("DOS")]),_._v(" 、 "),t("code",[_._v("DDOS")]),_._v(" 等攻击。")])]),_._v(" "),t("h3",{attrs:{id:"_3-udp-的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-udp-的优点"}},[_._v("#")]),_._v(" （3）UDP 的优点")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("快、比 TCP 稍安全。")])]),_._v(" "),t("li",[t("code",[_._v("UDP")]),_._v(" 是一个无状态的传输协议，且 "),t("code",[_._v("UDP")]),_._v(" 没有 "),t("code",[_._v("TCP")]),_._v(" 的握手、确认、窗口、重传、拥塞控制等机制，所以它在传递数据时非常快。没有 "),t("code",[_._v("TCP")]),_._v(" 的这些机制，"),t("code",[_._v("UDP")]),_._v(" 较 "),t("code",[_._v("TCP")]),_._v(" 能被攻击者利用的漏洞就要少一些。")]),_._v(" "),t("li",[_._v("但 "),t("code",[_._v("UDP")]),_._v(" 也是无法避免攻击的，比如："),t("code",[_._v("UDP flood")]),_._v(" 攻击。")])]),_._v(" "),t("h3",{attrs:{id:"_4-udp-的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-udp-的缺点"}},[_._v("#")]),_._v(" （4）UDP 的缺点")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("不可靠、不稳定。")])]),_._v(" "),t("li",[_._v("因为 "),t("code",[_._v("UDP")]),_._v(" 没有 "),t("code",[_._v("TCP")]),_._v(" 那些可靠的机制，所以在数据传递时，如果网络质量不好，就会很容易"),t("strong",[_._v("丢包")]),_._v("。")])]),_._v(" "),t("h2",{attrs:{id:"_3、ddos-攻击-由-tcp-和-udp-的缺点引出-ddos-攻击问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、ddos-攻击-由-tcp-和-udp-的缺点引出-ddos-攻击问题"}},[_._v("#")]),_._v(" 3、DDOS 攻击（由 TCP 和 UDP 的缺点引出 DDOS 攻击问题）")]),_._v(" "),t("h3",{attrs:{id:"_1-什么是-ddos-攻击"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-ddos-攻击"}},[_._v("#")]),_._v(" （1）什么是 DDOS 攻击？")]),_._v(" "),t("ul",[t("li",[_._v("分布式拒绝服务攻击（Distributed denial of sevice attack）；")]),_._v(" "),t("li",[_._v("即向目标系统同时提出"),t("strong",[_._v("数量庞大")]),_._v("的服务请求。")])]),_._v(" "),t("h3",{attrs:{id:"_2-ddos-攻击方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-ddos-攻击方式"}},[_._v("#")]),_._v(" （2）DDOS 攻击方式？")]),_._v(" "),t("p",[_._v("攻击者如何攻击目标主机呢？")]),_._v(" "),t("ul",[t("li",[_._v("通过使"),t("strong",[_._v("网络过载")]),_._v("来"),t("u",[_._v("干扰甚至阻断")]),_._v("正常的网络通讯。")]),_._v(" "),t("li",[_._v("通过向服务器提出大量的服务请求、使服务器超负荷。")]),_._v(" "),t("li",[_._v("阻断"),t("strong",[_._v("某一用户")]),_._v("访问服务器。")]),_._v(" "),t("li",[_._v("阻断"),t("strong",[_._v("某服务")]),t("u",[_._v("与特定系统或个人")]),_._v("的通讯。")])]),_._v(" "),t("h3",{attrs:{id:"_3-如何应对-ddos-攻击"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何应对-ddos-攻击"}},[_._v("#")]),_._v(" （3）如何应对 DDOS 攻击？")]),_._v(" "),t("ul",[t("li",[_._v("黑名单。")]),_._v(" "),t("li",[t("code",[_._v("DDOS")]),_._v(" 清洗：对用户请求的数据进行"),t("strong",[_._v("实时监控")]),_._v("，及时发现 "),t("code",[_._v("DOS")]),_._v(" 攻击等异常流量，在不影响正常业务开展的情况下清洗掉这些异常流量。")]),_._v(" "),t("li",[t("code",[_._v("CDN")]),_._v(" 加速。")]),_._v(" "),t("li",[_._v("高仿服务器：高仿服务器主要是指能独立防御"),t("strong",[_._v("50Gbps 以上")]),_._v(" ( "),t("code",[_._v("1Gbps=1024Mbps，即每秒1000M")]),_._v(" ) 的服务器，能够帮助网站"),t("strong",[_._v("拒绝服务攻击")]),_._v("，定期扫描"),t("strong",[_._v("网络主节点")]),_._v("。")])]),_._v(" "),t("h2",{attrs:{id:"_4、tcp-为什么可靠"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、tcp-为什么可靠"}},[_._v("#")]),_._v(" 4、TCP 为什么可靠？")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("TCP")]),_._v(" 会通过"),t("strong",[_._v("检验和")]),_._v("、"),t("strong",[_._v("序列号")]),_._v("、"),t("strong",[_._v("确认应答")]),_._v("、"),t("strong",[_._v("重发控制")]),_._v("、"),t("strong",[_._v("连接管理")]),_._v("及"),t("strong",[_._v("窗口控制")]),_._v("等机制实现可靠性传输。")]),_._v(" "),t("li",[t("strong",[_._v("那如何通过以上机制来实现可靠性传输呢？")])]),_._v(" "),t("li",[_._v("在 "),t("code",[_._v("TCP")]),_._v(" 中，当发送端的数据到达接收主机时，接收端主机会返回一个已收到消息的通知。这个消息叫做确认应答 "),t("code",[_._v("（ACK）")]),_._v(" 。（确认应答）")]),_._v(" "),t("li",[_._v("相反，当发送端发送数据出去之后，且在一段时间内，没有等到确认应答，则数据极有可能出现丢失的情况。")]),_._v(" "),t("li",[_._v("如果在一定时间内没有等到确认应答，那么发送方就可以认为数据已经丢失，并进行重发。由此，即使产生了丢包，仍然能够保证数据能够到达对端，实现可靠传输。（丢包重发）")]),_._v(" "),t("li",[_._v("此外，也有可能因为一些其他原因导致确认应答"),t("strong",[_._v("延迟到达")]),_._v("，此时，发送主机同样会按照机制重发数据。（延迟重发）")]),_._v(" "),t("li",[_._v("但是这对于目标主机来说，简直是一个巨大的灾难。因为目标主机会反复收到相同的数据。")]),_._v(" "),t("li",[_._v("为此，需要引入一种新的机制，"),t("strong",[_._v("序列号")]),_._v("。序列号能够识别"),t("strong",[_._v("是否已经接收数据")]),_._v("，及"),t("strong",[_._v("是否需要接收数据")]),_._v("。（序列号）")]),_._v(" "),t("li",[_._v("序列号是按照顺序给发送数据的每一个字节都"),t("strong",[_._v("标上号码的编号")]),_._v("。接收端会查询所接收数据中 "),t("code",[_._v("TCP")]),_._v(" 首部的序列号和数据的长度，将自己下一步应该接收的序号作为确认应答返送回去。（序列号）")]),_._v(" "),t("li",[_._v("就这样，通过序列号、确认应答等机制，实现 "),t("code",[_._v("TCP")]),_._v(" 的可靠传输。")])]),_._v(" "),t("p",[t("strong",[_._v("注：")]),_._v(" 序列号主要是让接收端可以丢弃数据并返回下一个应答号，这样就不会频繁地收到同一个数据。")]),_._v(" "),t("h2",{attrs:{id:"_5、tcp-的三次握手和四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、tcp-的三次握手和四次挥手"}},[_._v("#")]),_._v(" 5、TCP 的三次握手和四次挥手")]),_._v(" "),t("h3",{attrs:{id:"_1-tcp-的三次握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp-的三次握手"}},[_._v("#")]),_._v(" （1）TCP 的三次握手")]),_._v(" "),t("p",[t("strong",[_._v("场景模拟：")])]),_._v(" "),t("ul",[t("li",[_._v("如通话一样，比如我现在跟面试官您打电话。那我会先问，喂，您好，听得到吗？")]),_._v(" "),t("li",[_._v("你会回我说，听到啦！那你能听到我的话吗？")]),_._v(" "),t("li",[_._v("我会再回你说，听到了，我们可以开始聊天了。")])]),_._v(" "),t("p",[t("strong",[_._v("三次握手：")])]),_._v(" "),t("ul",[t("li",[_._v("首先，客户端会发送一个带有 "),t("code",[_._v("SYN")]),_._v(" 标志的数据包给对方；")]),_._v(" "),t("li",[_._v("接收方收到以后，会返回一个带有 "),t("code",[_._v("SYN/ACK")]),_._v(" 标志的数据包返回给发送端，代表成功传达消息；")]),_._v(" "),t("li",[_._v("之后发送端再回传一个带有 "),t("code",[_._v("ACK")]),_._v(" 标志的数据包，代表握手结束。")])]),_._v(" "),t("h3",{attrs:{id:"_2-tcp-为什么要三次握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp-为什么要三次握手"}},[_._v("#")]),_._v(" （2）TCP 为什么要三次握手？")]),_._v(" "),t("ul",[t("li",[_._v("验证服务端和客户端是否遵循 "),t("code",[_._v("TCP/IP")]),_._v(" 协议；")]),_._v(" "),t("li",[_._v("为了防止已失效的"),t("strong",[_._v("连接请求报文段")]),_._v("突然又传送到服务端，避免错误产生。")])]),_._v(" "),t("h3",{attrs:{id:"_3-tcp-的四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp-的四次挥手"}},[_._v("#")]),_._v(" （3）TCP 的四次挥手")]),_._v(" "),t("p",[t("strong",[_._v("第一次挥手：")])]),_._v(" "),t("ul",[t("li",[_._v("客户端进程发出"),t("strong",[_._v("连接释放报文")]),_._v("，并且"),t("strong",[_._v("停止发送数据")]),_._v("。")])]),_._v(" "),t("p",[t("strong",[_._v("第二次挥手：")])]),_._v(" "),t("ul",[t("li",[_._v("服务器收到"),t("strong",[_._v("连接释放报文")]),_._v("，发出"),t("strong",[_._v("确认报文")]),_._v("，此时，服务端就进行了 "),t("code",[_._v("close-wait")]),_._v(" （关闭等待）状态。（客户端向服务器方向释放了，但是服务器发送数据，客户端依然要接收）")]),_._v(" "),t("li",[_._v("客户端收到服务器的确认请求后，客户端就进入了 "),t("code",[_._v("Fin-wait-2")]),_._v(" （终止等待 2）状态，等待服务器发送"),t("strong",[_._v("连接释放报文")]),_._v("（在这之前还需要接收服务器发送的最后数据）。")])]),_._v(" "),t("p",[t("strong",[_._v("第三次挥手：")])]),_._v(" "),t("ul",[t("li",[_._v("服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，服务器就进入了 "),t("code",[_._v("Last-ack")]),_._v(" （最后确认）。")])]),_._v(" "),t("p",[t("strong",[_._v("第四次挥手：")])]),_._v(" "),t("ul",[t("li",[_._v("客户端收到服务器的连接释放报文后，必须发出确认，客户端就进入了 "),t("code",[_._v("time-wait")]),_._v(" （时间等待）状态。")]),_._v(" "),t("li",[_._v("服务端只要收到了客户端发出的确认，立即进入 "),t("code",[_._v("closed")]),_._v(" 状态。")]),_._v(" "),t("li",[_._v("至此，就结束了这次的 "),t("code",[_._v("TCP")]),_._v(" 连接。（服务器结束 "),t("code",[_._v("TCP")]),_._v(" 连接的时间要比客户端早一些）")])]),_._v(" "),t("h3",{attrs:{id:"_4-tcp-为什么要四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-tcp-为什么要四次挥手"}},[_._v("#")]),_._v(" （4）TCP 为什么要四次挥手？")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("之所以要四次挥手，其实是"),t("strong",[_._v("确保双方数据都已发送完毕")]),_._v("。")])]),_._v(" "),t("li",[t("p",[t("code",[_._v("TCP")]),_._v(" 是全双工模式，这就意味着，当 "),t("code",[_._v("主机1")]),_._v(" 发送 "),t("code",[_._v("FIN")]),_._v(" 报文段时，只是表示 "),t("code",[_._v("主机1")]),_._v(" 已经没有数据要发送了， "),t("code",[_._v("主机1")]),_._v(" 告诉 "),t("code",[_._v("主机2")]),_._v(" ，它的数据已经全部发送完毕了。")])]),_._v(" "),t("li",[t("p",[_._v("当 "),t("code",[_._v("主机2")]),_._v(" 返回 "),t("code",[_._v("ACK")]),_._v(" 报文段时，表示它已经知道 "),t("code",[_._v("主机1")]),_._v(" 没有数据发送了，但是 "),t("code",[_._v("主机2")]),_._v(" 还是可以发送数据到 "),t("code",[_._v("主机1")]),_._v(" 的。")])]),_._v(" "),t("li",[t("p",[_._v("当"),t("code",[_._v("主机2")]),_._v(" 也发送了 "),t("code",[_._v("FIN")]),_._v(" 报文段时，这个时候就表示 "),t("code",[_._v("主机2")]),_._v(" 也没有数据要发送了，就会告诉 "),t("code",[_._v("主机1")]),_._v(" ，我也没有数据要发送了。")])]),_._v(" "),t("li",[t("p",[_._v("最后， "),t("code",[_._v("主机1")]),_._v(" 再发送 "),t("code",[_._v("ACK")]),_._v(" 报文段来确认握手结束，之后彼此就会愉快的断开此次的 "),t("code",[_._v("TCP")]),_._v(" 连接。")])])]),_._v(" "),t("h3",{attrs:{id:"_5-什么是面向连接协议-什么是面向无连接协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-什么是面向连接协议-什么是面向无连接协议"}},[_._v("#")]),_._v(" （5）什么是面向连接协议？什么是面向无连接协议？")]),_._v(" "),t("p",[t("strong",[_._v("面向连接协议：")])]),_._v(" "),t("ul",[t("li",[_._v("通信双方在通信时，需要事先建立好一条虚拟的通信线路。")]),_._v(" "),t("li",[_._v("通信过程有“"),t("u",[_._v("建立连接")]),_._v("、"),t("u",[_._v("维护连接")]),_._v("、"),t("u",[_._v("断开连接")]),_._v("“三个阶段。")])]),_._v(" "),t("p",[t("strong",[_._v("面向无连接协议：")])]),_._v(" "),t("ul",[t("li",[_._v("与面向连接相对，通信双方不需要事先建立"),t("u",[_._v("通信线路")]),_._v("，而是把每个"),t("strong",[_._v("带有目的地址的报文分组")]),_._v("送到通信线路上，由系统自主"),t("u",[_._v("选定线路")]),_._v("进行传输。")]),_._v(" "),t("li",[_._v("面向无连接只有“"),t("u",[_._v("传送数据")]),_._v("”的过程。")])]),_._v(" "),t("h3",{attrs:{id:"_6-为什么建立连接是三次握手-关闭连接是四次挥手呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-为什么建立连接是三次握手-关闭连接是四次挥手呢"}},[_._v("#")]),_._v(" （6）为什么建立连接是三次握手，关闭连接是四次挥手呢？")]),_._v(" "),t("ul",[t("li",[_._v("建立连接的时候，服务器在 "),t("code",[_._v("listen")]),_._v(" 状态下，收到建立连接请求的 "),t("code",[_._v("SYN")]),_._v(" 报文后，服务器把 "),t("code",[_._v("ACK")]),_._v(" 和 "),t("code",[_._v("SYN")]),_._v(" 放在一个报文里发送给客户端。")]),_._v(" "),t("li",[_._v("而关闭连接时，服务器收到对方的 "),t("code",[_._v("FIN")]),_._v(" 报文时，仅仅表示"),t("strong",[_._v("①")]),_._v("对方不再发送数据了但是还能接收数据，而"),t("strong",[_._v("②")]),_._v("自己也未必所有数据都已经发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方，之后 ③ 己方再发送 "),t("code",[_._v("FIN")]),_._v("报文给对方来表示同意现在关闭连接。因此，己方 "),t("code",[_._v("ACK")]),_._v(" 和 "),t("code",[_._v("FIN")]),_._v(" 一般都会"),t("strong",[_._v("分开发送")]),_._v("，从而导致多了一次。")])]),_._v(" "),t("p",[t("strong",[_._v("注：")]),_._v(" ①②③ 表示第一二三次挥手")]),_._v(" "),t("h3",{attrs:{id:"_7-如果已经建立了连接-但是客户端突然出现故障了该怎么办"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-如果已经建立了连接-但是客户端突然出现故障了该怎么办"}},[_._v("#")]),_._v(" （7）如果已经建立了连接，但是客户端突然出现故障了该怎么办？")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("TCP")]),_._v(" 还有一个"),t("strong",[_._v("保活计时器")]),_._v("。")]),_._v(" "),t("li",[_._v("当客户端出现故障时，服务器肯定是不会一直等待下去，白白浪费资源的。")]),_._v(" "),t("li",[_._v("服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常设置为 "),t("code",[_._v("2h")]),_._v(" ，若 "),t("code",[_._v("2h")]),_._v(" 还没有收到客户端的任何数据，服务器就会发送一个 "),t("strong",[_._v("探测报文段")]),_._v(" 给客户端，以后每隔 "),t("code",[_._v("75s")]),_._v(" 发送一次。")]),_._v(" "),t("li",[_._v("若一连发送 "),t("strong",[_._v("10 个探测报文段")]),_._v(" 仍没有反应，服务器就认为客户端出了故障，紧接着就会关闭连接。")])]),_._v(" "),t("p",[t("strong",[_._v("注：")]),_._v(" "),t("code",[_._v("10x75=750s=12.5min")])]),_._v(" "),t("h1",{attrs:{id:"🏒-五、tcp-的通信机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏒-五、tcp-的通信机制"}},[_._v("#")]),_._v(" 🏒 五、TCP 的通信机制")]),_._v(" "),t("h2",{attrs:{id:"_1、tcp-的重发控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、tcp-的重发控制"}},[_._v("#")]),_._v(" 1、TCP 的重发控制")]),_._v(" "),t("ul",[t("li",[_._v("我们都知道，在数据传输过程中可能会因为各种原因出现丢包现象，而当出现丢包现象时，即发送端在发完数据并等待一段时间以后，未接收到接收方应答，则视为丢包，于是就会进行重发。")]),_._v(" "),t("li",[_._v("其中，丢包现象分为两种："),t("strong",[_._v("①")]),_._v("发送过程丢包；"),t("strong",[_._v("②")]),_._v("接收过程丢包。")]),_._v(" "),t("li",[_._v("那么，发送端发送完数据以后多久没有收到确认应答才判定数据丢包了呢？")]),_._v(" "),t("li",[_._v("这个一般都是随着网络环境的变化而变化的， "),t("code",[_._v("TCP")]),_._v(" 会在每次发包时计算"),t("strong",[_._v("往返时间")]),_._v("以及"),t("strong",[_._v("偏差")]),_._v("来决定等待时间。")]),_._v(" "),t("li",[_._v("若重发后又出现了丢包，则下一次等待的时间会以"),t("strong",[_._v("2 倍")]),_._v("、"),t("strong",[_._v("4 倍")]),_._v("的指数函数增长。")]),_._v(" "),t("li",[_._v("但它肯定是不会无限进行重发的，当重发次数达到一定程度后"),t("sup",[_._v("[1]")]),_._v("，会判定为网络异常，两端通信就会被强制关闭。")])]),_._v(" "),t("p",[_._v("[1]："),t("code",[_._v("TCP")]),_._v(" 有一个保活计时器，如果在 "),t("code",[_._v("2h")]),_._v(" 后还没有收到客户端的数据，那么就会重新复位这个计时器，之后每隔 "),t("code",[_._v("75s")]),_._v(" 会发送一次，如果一连发送 10 个还是没有收到，那么就会断开连接。")]),_._v(" "),t("h2",{attrs:{id:"_2、tcp-的滑动窗口控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、tcp-的滑动窗口控制"}},[_._v("#")]),_._v(" 2、TCP 的滑动窗口控制")]),_._v(" "),t("p",[t("strong",[_._v("解题：")])]),_._v(" "),t("ul",[t("li",[_._v("什么原因导致需要有滑动窗口？")]),_._v(" "),t("li",[_._v("有了滑动窗口后可以解决什么问题？")])]),_._v(" "),t("p",[t("strong",[_._v("白话文回答：")])]),_._v(" "),t("ul",[t("li",[_._v("我们都知道，数据不应该一次性发送，不然丢失了都不知道往哪里找，因此应该采取 "),t("strong",[_._v("分段发送")]),_._v(" 的措施。")]),_._v(" "),t("li",[_._v("但是呢， "),t("code",[_._v("TCP")]),_._v(" 将数据分段发送，虽然提高了传输的可靠性，但是存在着一个"),t("u",[_._v("致命的缺点")]),_._v("，那就是 "),t("strong",[_._v("效率非常低")]),_._v(" 。")]),_._v(" "),t("li",[_._v("因为每发送一段数据，都要等待接收端的确认应答后才能继续发送，若整个数据的分段较多，那么通信的性能就会很低了，因此 "),t("code",[_._v("TCP")]),_._v(" 引入了 "),t("strong",[_._v("窗口")]),_._v(" 这个概念。")]),_._v(" "),t("li",[t("strong",[_._v("所谓窗口")]),_._v("，表示的是"),t("u",[_._v("无需等待")]),_._v("接收方的确认应答而可以"),t("strong",[_._v("连续发送多段数据")]),_._v("。")]),_._v(" "),t("li",[t("strong",[_._v("举个例子")]),_._v("：假设要发送 "),t("code",[_._v("4")]),_._v(" 段数据，如果每次都要发送后接收完才能再重新发送，那来回就得 "),t("code",[_._v("8")]),_._v(" 次。但如果用滑动窗口的话，四段数据可以同时发出去，接收端再返回相应的确认应答给发送方。")]),_._v(" "),t("li",[_._v("这个时候发送方会根据相应的确认应答继续发送比该确认序列中序列号大的数据即可。")])]),_._v(" "),t("h2",{attrs:{id:"_3、滑动窗口的重发控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、滑动窗口的重发控制"}},[_._v("#")]),_._v(" 3、滑动窗口的重发控制")]),_._v(" "),t("ul",[t("li",[_._v("若使用滑动窗口这一技术后，即使某段数据出现"),t("strong",[_._v("丢包现象")]),_._v("，也不会造成很大的影响。")]),_._v(" "),t("li",[_._v("因为接收端会一边接收发送端传过来的数据，一边用某种方式告知发送端前面丢失了哪一段数据。")])]),_._v(" "),t("h2",{attrs:{id:"_4、tcp-的流量控制机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、tcp-的流量控制机制"}},[_._v("#")]),_._v(" 4、TCP 的流量控制机制")]),_._v(" "),t("p",[t("strong",[_._v("为什么需要流量控制机制？")])]),_._v(" "),t("ul",[t("li",[_._v("有时，发送端发送给接收端的数据超过了接收端的"),t("strong",[_._v("最大承载能力")]),_._v("，就会造成数据"),t("strong",[_._v("无法接收")]),_._v("的情况，从而导致之后会进行"),t("strong",[_._v("数据重发")]),_._v("，这样子会非常"),t("strong",[_._v("浪费性能")]),_._v("。")])]),_._v(" "),t("p",[t("strong",[_._v("如何解决这种问题呢？引出流量控制机制")])]),_._v(" "),t("ul",[t("li",[_._v("为了防止上述情况发生，"),t("code",[_._v("TCP")]),_._v(" 提供了一种"),t("strong",[_._v("机制")]),_._v("（即"),t("u",[_._v("流量控制机制")]),_._v("）来使得发送端每次发送的数据尽可能的在接收端的"),t("strong",[_._v("承载范围之内")]),_._v("。")]),_._v(" "),t("li",[_._v("而实现方式就是， "),t("code",[_._v("接收端")]),_._v(" 向 "),t("code",[_._v("发送端")]),_._v(" 告知自己能够接收的"),t("strong",[_._v("数据大小")]),_._v("，如此一来，发送端每次发送的数据就都不会超过"),t("u",[_._v("该值")]),_._v("，我们成该值为"),t("strong",[_._v("窗口大小")]),_._v("。")]),_._v(" "),t("li",[_._v("一旦接收端暂时无法接收任何数据，它会告知发送端，因此发送端会"),t("strong",[_._v("暂停数据的发送")]),_._v("。")]),_._v(" "),t("li",[_._v("但为了后续数据的正常发送，发送端会不时地向接收端发送一个 "),t("strong",[_._v("窗口探测")]),_._v(" ，试探性地看一下接收端"),t("strong",[_._v("能否继续接收数据")]),_._v("。")])]),_._v(" "),t("h2",{attrs:{id:"_5、tcp-的拥塞控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、tcp-的拥塞控制"}},[_._v("#")]),_._v(" 5、TCP 的拥塞控制")]),_._v(" "),t("ul",[t("li",[_._v("因为出现了窗口控制，数据不再是一段一段发送，而是连续发送多段数据包，因此有时候如果出现网络拥堵的情况下，而我们又同时发送了大量的数据包，这很有可能会导致网络瘫痪。")]),_._v(" "),t("li",[_._v("TCP 运用了一种叫做 "),t("strong",[_._v("慢启动")]),_._v(" 的技巧缓解上述问题。那何为 "),t("strong",[_._v("慢启动")]),_._v(" 呢？")]),_._v(" "),t("li",[_._v("就是不要在一开始就瞬间发送大量数据包，而是先发送一部分，然后再根据收发情况再发送更多的数据包。")]),_._v(" "),t("li",[_._v("总结就是每次发送的数据包会以 "),t("code",[_._v("1,2,4")]),_._v(" 的指数型增长，但窗口大小也不会无限指数型增大，而是会达到某个值时进行一些调整，该值称为 "),t("strong",[_._v("慢启动阈值")]),_._v(" 。")])]),_._v(" "),t("blockquote",[t("p",[_._v("流量控制机制和拥塞控制机制的区别：")]),_._v(" "),t("ul",[t("li",[_._v("流量控制是以"),t("strong",[_._v("接收端")]),_._v("为主导，接收端明确自己想要的窗口大小，然后发送端再把数据发送给接收端；")]),_._v(" "),t("li",[_._v("而拥塞控制机制则是以"),t("strong",[_._v("发送端")]),_._v("为主导，发送端试探性的以 1,2,4 的指数型增长给接收端发送数据，探测接收端的承载能力，等到接收端不能再接收数据时，发送端就会知道接收端没法承载这么多数据，于是就会进行向下调整。")])])]),_._v(" "),t("h1",{attrs:{id:"🏸-六、结束语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏸-六、结束语"}},[_._v("#")]),_._v(" 🏸 六、结束语")]),_._v(" "),t("p",[_._v("在上面的这篇文章中，介绍了两种关于计算机网络知识的学习方式，同时，也用了 24 道题目来帮助大家更好地理解计网在前端面试中考察的内容。")]),_._v(" "),t("p",[_._v("对于前端来说，计网考察的内容相对会比较浅层，所以周一也用比较通俗易懂的方式去梳理一些经典的题目。如果有想要再继续深入学习的小伙伴，也可以看书籍继续补充自己的知识深度~")]),_._v(" "),t("p",[_._v("最后，预祝看到这篇文章的小伙伴们，都能够斩获到自己心仪的 "),t("code",[_._v("offer")]),_._v(" ~")]),_._v(" "),t("h1",{attrs:{id:"🐣-彩蛋-one-more-thing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🐣-彩蛋-one-more-thing"}},[_._v("#")]),_._v(" 🐣 彩蛋 One More Thing")]),_._v(" "),t("h2",{attrs:{id:"🏷️pdf-内容获取"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏷️pdf-内容获取"}},[_._v("#")]),_._v(" 🏷️pdf 内容获取")]),_._v(" "),t("p",[_._v("👉 微信关注公众号 "),t("code",[_._v("星期一研究室")]),_._v(" ，回复关键字 "),t("code",[_._v("计网面试pdf")]),_._v(" 即可获取相关 "),t("code",[_._v("pdf")]),_._v(" 内容~")]),_._v(" "),t("p",[_._v("👉 回复 "),t("code",[_._v("面试大全pdf")]),_._v(" 可获取全专栏内容！")]),_._v(" "),t("h2",{attrs:{id:"🏷️-更新地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏷️-更新地址"}},[_._v("#")]),_._v(" 🏷️ 更新地址")]),_._v(" "),t("p",[_._v("👉 "),t("a",{attrs:{href:"https://juejin.cn/column/7007991853089849351",target:"_blank",rel:"noopener noreferrer"}},[_._v("offer 来了面试专栏"),t("OutboundLink")],1)]),_._v(" "),t("h2",{attrs:{id:"🏷️-番外篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏷️-番外篇"}},[_._v("#")]),_._v(" 🏷️ 番外篇")]),_._v(" "),t("ul",[t("li",[_._v("如果您觉得这篇文章有帮助到您的的话不妨点赞支持一下哟~~😉")]),_._v(" "),t("li",[_._v("以上就是本文的全部内容！我们下期见！👋👋👋")])])])}),[],!1,null,null,null);v.default=r.exports}}]);