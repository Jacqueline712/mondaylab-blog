(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{650:function(_,v,t){"use strict";t.r(v);var a=t(13),r=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"🎹-序言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🎹-序言"}},[_._v("#")]),_._v(" 🎹 序言")]),_._v(" "),t("p",[_._v("操作系统对于前端来说考察的内容并不多，所以在今天的文章中将依据比较常考的知识点进行归纳总结。")]),_._v(" "),t("p",[_._v("下面开始本文的讲解~")]),_._v(" "),t("h1",{attrs:{id:"🎸-一、思维导图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🎸-一、思维导图"}},[_._v("#")]),_._v(" 🎸 一、思维导图")]),_._v(" "),t("p",[_._v("我们先用一张思维导图来梳理操作系统相关的面试题。"),t("strong",[_._v("具体如下 👇")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/91d34a4219794169bf5b7555fdc0884c.png#pic_center",alt:"OS面试题复习框架"}})]),_._v(" "),t("p",[_._v("下面开始归纳操作系统常见的面试题。")]),_._v(" "),t("h1",{attrs:{id:"🎺-二、常见面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🎺-二、常见面试题"}},[_._v("#")]),_._v(" 🎺 二、常见面试题")]),_._v(" "),t("h2",{attrs:{id:"_1、进程和线程以及它们的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、进程和线程以及它们的区别"}},[_._v("#")]),_._v(" 1、进程和线程以及它们的区别")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("进程")]),_._v("是对程序运行时的封装，是系统进行"),t("strong",[_._v("资源调度和分配")]),_._v("的的基本单位，实现了操作系统的并发；")]),_._v(" "),t("li",[t("strong",[_._v("线程")]),_._v("是进程的"),t("strong",[_._v("子任务")]),_._v("，是"),t("strong",[_._v("CPU 调度和分配的基本单位")]),_._v("，用于保证程序的实时性，实现进程内部的并发；")]),_._v(" "),t("li",[_._v("一个程序至少有一个进程，一个进程至少有一个线程，线程依赖于进程而存在；")]),_._v(" "),t("li",[_._v("进程在执行过程中拥有"),t("strong",[_._v("独立的内存单元")]),_._v("，而多个线程共享进程的内存。")])]),_._v(" "),t("h2",{attrs:{id:"_2、进程间通信的几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、进程间通信的几种方式"}},[_._v("#")]),_._v(" 2、进程间通信的几种方式")]),_._v(" "),t("h3",{attrs:{id:"_1-管道-pipe-及命名管道-named-pipe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-管道-pipe-及命名管道-named-pipe"}},[_._v("#")]),_._v(" （1）管道(pipe)及命名管道(named pipe)")]),_._v(" "),t("ul",[t("li",[_._v("管道可用于具有"),t("strong",[_._v("亲缘关系")]),_._v("的父子进程间的通信。")]),_._v(" "),t("li",[_._v("命名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。")])]),_._v(" "),t("h3",{attrs:{id:"_2-信号-signal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-信号-signal"}},[_._v("#")]),_._v(" （2）信号(signal)")]),_._v(" "),t("ul",[t("li",[_._v("信号是一种比较复杂的通信方式，用于通知和接收某个已经发生的进程事件。")])]),_._v(" "),t("h3",{attrs:{id:"_3-消息队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-消息队列"}},[_._v("#")]),_._v(" （3）消息队列")]),_._v(" "),t("ul",[t("li",[_._v("消息队列是消息的"),t("strong",[_._v("链接表")]),_._v("，它克服了以上两种通信方式中"),t("strong",[_._v("信号量有限")]),_._v("的缺点。")]),_._v(" "),t("li",[_._v("具有"),t("strong",[_._v("写权限")]),_._v("的进程可以按照一定的规则向消息队列中添加新信息。")]),_._v(" "),t("li",[_._v("对消息队列有"),t("strong",[_._v("读权限")]),_._v("的进程则可以从消息队列中读取信息。")])]),_._v(" "),t("h3",{attrs:{id:"_4-共享内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-共享内存"}},[_._v("#")]),_._v(" （4）共享内存")]),_._v(" "),t("ul",[t("li",[_._v("可以说这是"),t("strong",[_._v("最有用的")]),_._v("进程间通信方式。")]),_._v(" "),t("li",[_._v("它使得多个进程可以访问"),t("strong",[_._v("同一块内存空间")]),_._v("，不同进程可以及时看到对方进程中对共享内存中数据的更新。")]),_._v(" "),t("li",[_._v("这种方式需要依靠某种"),t("strong",[_._v("同步操作")]),_._v("，如互斥锁和信号量等。")])]),_._v(" "),t("h3",{attrs:{id:"_5-信号量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-信号量"}},[_._v("#")]),_._v(" （5）信号量")]),_._v(" "),t("ul",[t("li",[_._v("主要作为进程之间及同一种进程的不同线程之间的同步和互斥手段；")])]),_._v(" "),t("h3",{attrs:{id:"_6-套接字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-套接字"}},[_._v("#")]),_._v(" （6）套接字")]),_._v(" "),t("ul",[t("li",[_._v("这是一种更为一般的进程间通信机制，它可用于网络中"),t("strong",[_._v("不同机器之间")]),_._v("的进程间通信，应用非常广泛。")])]),_._v(" "),t("h2",{attrs:{id:"_3、线程同步的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、线程同步的方式"}},[_._v("#")]),_._v(" 3、线程同步的方式")]),_._v(" "),t("h3",{attrs:{id:"_1-互斥量-synchronized-lock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-互斥量-synchronized-lock"}},[_._v("#")]),_._v(" （1）互斥量 Synchronized/Lock")]),_._v(" "),t("ul",[t("li",[_._v("采用"),t("strong",[_._v("互斥对象机制")]),_._v("，只有拥有互斥对象的线程才有访问"),t("strong",[_._v("公共资源")]),_._v("的权限。")]),_._v(" "),t("li",[_._v("因为互斥对象只有一个，所以可以保证"),t("strong",[_._v("公共资源")]),_._v("不会被"),t("strong",[_._v("多个线程")]),_._v("同时访问。")])]),_._v(" "),t("h3",{attrs:{id:"_2-信号量-semphare"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-信号量-semphare"}},[_._v("#")]),_._v(" （2）信号量 Semphare")]),_._v(" "),t("ul",[t("li",[_._v("它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的"),t("strong",[_._v("最大线程数量")]),_._v("。")])]),_._v(" "),t("h3",{attrs:{id:"_3-事件-信号-wait-notify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-事件-信号-wait-notify"}},[_._v("#")]),_._v(" （3）事件(信号)Wait/Notify")]),_._v(" "),t("ul",[t("li",[_._v("通过"),t("strong",[_._v("通知操作")]),_._v("的方式来保持多线程同步，还可以方便的实现"),t("strong",[_._v("多线程优先级")]),_._v("的比较操作。")])]),_._v(" "),t("h2",{attrs:{id:"_4、什么是死锁-死锁产生的条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、什么是死锁-死锁产生的条件"}},[_._v("#")]),_._v(" 4、什么是死锁？死锁产生的条件？")]),_._v(" "),t("h3",{attrs:{id:"_1-死锁的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-死锁的概念"}},[_._v("#")]),_._v(" （1）死锁的概念")]),_._v(" "),t("ul",[t("li",[_._v("在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。")]),_._v(" "),t("li",[_._v("通俗的讲，就是两个或多个进程"),t("strong",[_._v("无限期的阻塞")]),_._v("、"),t("strong",[_._v("相互等待")]),_._v("的一种状态。")])]),_._v(" "),t("h3",{attrs:{id:"_2-死锁产生的四个必要条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-死锁产生的四个必要条件"}},[_._v("#")]),_._v(" （2）死锁产生的四个必要条件")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("互斥")]),_._v("：至少有一个资源必须属于"),t("strong",[_._v("非共享模式")]),_._v("，即一次只能被一个进程使用；若其他申请使用该资源，那么申请进程必须等到该资源被释放为止。")]),_._v(" "),t("li",[t("strong",[_._v("占有并等待")]),_._v("：一个进程必须占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有。")]),_._v(" "),t("li",[t("strong",[_._v("非抢占")]),_._v("：进程不能被抢占，即资源只能被"),t("strong",[_._v("进程在完成任务后")]),_._v("自愿释放。")]),_._v(" "),t("li",[t("strong",[_._v("循环等待")]),_._v("：若干进程之间形成一种"),t("strong",[_._v("头尾相接")]),_._v("的环形等待资源关系。")])]),_._v(" "),t("h3",{attrs:{id:"_3-处理死锁的基本策略和常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-处理死锁的基本策略和常用方法"}},[_._v("#")]),_._v(" （3）处理死锁的基本策略和常用方法")]),_._v(" "),t("ul",[t("li",[_._v("解决死锁的基本方法主要有"),t("strong",[_._v("预防死锁")]),_._v("、"),t("strong",[_._v("避免死锁")]),_._v("、"),t("strong",[_._v("检测死锁")]),_._v("、"),t("strong",[_._v("解除死锁")]),_._v(" 、"),t("strong",[_._v("鸵鸟策略")]),_._v("等。")])]),_._v(" "),t("h2",{attrs:{id:"_5、进程有哪几种状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、进程有哪几种状态"}},[_._v("#")]),_._v(" 5、进程有哪几种状态？")]),_._v(" "),t("p",[_._v("**（1）就绪状态：**进程已获得除处理机以外的所需资源，等待分配处理机资源。")]),_._v(" "),t("p",[_._v("**（2）运行状态：**占用处理机资源运行，处于此状态的进程数小于等于 CPU 数。")]),_._v(" "),t("p",[t("strong",[_._v("（3）阻塞状态：")]),_._v(" 进程等待某种条件，在条件未满足之前无法执行。")]),_._v(" "),t("h2",{attrs:{id:"_6、线程有几种状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、线程有几种状态"}},[_._v("#")]),_._v(" 6、线程有几种状态？")]),_._v(" "),t("p",[_._v("在 Java 虚拟机 中，线程从最初的创建到最终的消亡，要经历"),t("strong",[_._v("若干个状态")]),_._v("：")]),_._v(" "),t("ul",[t("li",[_._v("创建 "),t("code",[_._v("(new)")]),_._v(" 、就绪 "),t("code",[_._v("(runnable/start)")]),_._v(" 、运行 "),t("code",[_._v("(running)")]),_._v(" 、阻塞 "),t("code",[_._v("(blocked)")]),_._v(" 、等待 "),t("code",[_._v("(waiting)")]),_._v(" 、时间等待 "),t("code",[_._v("(time waiting)")]),_._v(" 和 消亡 "),t("code",[_._v("(dead/terminated)")]),_._v(" 。")]),_._v(" "),t("li",[t("strong",[_._v("在给定的时间点上，一个线程只能处于一种状态。")])])]),_._v(" "),t("h2",{attrs:{id:"_7、段式存储管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、段式存储管理"}},[_._v("#")]),_._v(" 7、段式存储管理")]),_._v(" "),t("h3",{attrs:{id:"_1-段式存储管理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-段式存储管理是什么"}},[_._v("#")]),_._v(" （1）段式存储管理是什么？")]),_._v(" "),t("p",[t("strong",[_._v("段式存储管理")]),_._v("是一种"),t("u",[_._v("符合用户视角的")]),t("strong",[_._v("内存分配管理方案")]),_._v("。")]),_._v(" "),t("p",[_._v("在段式存储管理中，将程序的地址空间划分为"),t("strong",[_._v("若干段")]),_._v("(segment)，如代码段、数据段、堆栈段；")]),_._v(" "),t("p",[_._v("这样每个进程有一个"),t("strong",[_._v("二维地址空间")]),_._v("，相互独立，互不干扰。")]),_._v(" "),t("h3",{attrs:{id:"_2-段式管理的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-段式管理的优缺点"}},[_._v("#")]),_._v(" （2）段式管理的优缺点")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("优点")]),_._v("："),t("strong",[_._v("没有内碎片")]),_._v("（因为段大小可变，可通过改变段大小来消除内碎片）。")]),_._v(" "),t("li",[t("strong",[_._v("缺点")]),_._v("：但段换入换出时，"),t("strong",[_._v("会产生外碎片")]),_._v("（比如 "),t("code",[_._v("4k")]),_._v(" 的段换 "),t("code",[_._v("5k")]),_._v(" 的段，会产生 "),t("code",[_._v("1k")]),_._v(" 的外碎片）。")])]),_._v(" "),t("h3",{attrs:{id:"_3-页式存储管理方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-页式存储管理方案"}},[_._v("#")]),_._v(" （3）页式存储管理方案")]),_._v(" "),t("p",[t("strong",[_._v("页式存储管理方案")]),_._v("是一种用户视角下"),t("u",[_._v("内存与物理内存相分离")]),_._v("的"),t("strong",[_._v("内存分配管理方案")]),_._v("。")]),_._v(" "),t("p",[_._v("在页式存储管理中，将程序的逻辑地址划分为"),t("strong",[_._v("固定大小的页")]),_._v(" "),t("code",[_._v("(page)")]),_._v(" ，而物理内存划分为"),t("strong",[_._v("同样大小的帧")]),_._v("，程序加载时，可以将任意一页放入内存中任意一个帧，这些帧不必连续，从而实现了"),t("strong",[_._v("离散分离")]),_._v("。")]),_._v(" "),t("h3",{attrs:{id:"_4-页式存储管理的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-页式存储管理的优缺点"}},[_._v("#")]),_._v(" （4）页式存储管理的优缺点")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("优点")]),_._v("：没有外碎片（因为页的大小固定）。")]),_._v(" "),t("li",[t("strong",[_._v("缺点")]),_._v("：但会产生内碎片（一个页可能填充不满）。")])]),_._v(" "),t("h2",{attrs:{id:"_8、进程调度策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、进程调度策略"}},[_._v("#")]),_._v(" 8、进程调度策略")]),_._v(" "),t("h3",{attrs:{id:"_1-fcfs-先来先服务-队列实现-非抢占的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-fcfs-先来先服务-队列实现-非抢占的"}},[_._v("#")]),_._v(" （1）FCFS(先来先服务，队列实现，非抢占的)")]),_._v(" "),t("p",[_._v("先请求 "),t("code",[_._v("CPU")]),_._v(" 的进程先分配到 "),t("code",[_._v("CPU")]),_._v(" 。")]),_._v(" "),t("h3",{attrs:{id:"_2-sjf-最短作业优先调度算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-sjf-最短作业优先调度算法"}},[_._v("#")]),_._v(" （2）SJF(最短作业优先调度算法)")]),_._v(" "),t("p",[_._v("平均等待时间最短，但难以知道下一个 "),t("code",[_._v("CPU")]),_._v(" 区间长度。")]),_._v(" "),t("h3",{attrs:{id:"_3-优先级调度算法-可以是抢占的-也可以是非抢占的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-优先级调度算法-可以是抢占的-也可以是非抢占的"}},[_._v("#")]),_._v(" （3）优先级调度算法(可以是抢占的，也可以是非抢占的)")]),_._v(" "),t("p",[_._v("优先级越高越先分配到 "),t("code",[_._v("CPU")]),_._v(" ，相同优先级先到先服务。")]),_._v(" "),t("p",[t("strong",[_._v("存在的主要问题是")]),_._v("：低优先级进程无穷等待 "),t("code",[_._v("CPU")]),_._v(" ，会导致无穷阻塞或饥饿。")]),_._v(" "),t("p",[t("strong",[_._v("解决方案")]),_._v("：老化（即对超过一定时间还未使用的进程进行删除）。")]),_._v(" "),t("h3",{attrs:{id:"_4-时间片轮转调度算法-可抢占的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-时间片轮转调度算法-可抢占的"}},[_._v("#")]),_._v(" （4）时间片轮转调度算法(可抢占的)")]),_._v(" "),t("p",[_._v("队列中没有进程被分配超过一个时间片的 "),t("code",[_._v("CPU")]),_._v(" 时间，除非它是唯一可运行的进程。")]),_._v(" "),t("p",[_._v("如果进程的 "),t("code",[_._v("CPU")]),_._v(" 区间超过了一个"),t("strong",[_._v("时间片")]),_._v("，那么该进程就被抢占并放回就绪队列。")]),_._v(" "),t("h3",{attrs:{id:"_5-多级队列调度算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-多级队列调度算法"}},[_._v("#")]),_._v(" （5）多级队列调度算法")]),_._v(" "),t("p",[_._v("将"),t("strong",[_._v("就绪队列")]),_._v("分成多个"),t("strong",[_._v("独立的队列")]),_._v("，每个队列都有自己的调度算法，队列之间采用固定优先级抢占调度。")]),_._v(" "),t("p",[_._v("其中，一个进程根据自身属性被永久地分配到一个队列中。")]),_._v(" "),t("h3",{attrs:{id:"_6-多级反馈队列调度算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-多级反馈队列调度算法"}},[_._v("#")]),_._v(" （6）多级反馈队列调度算法")]),_._v(" "),t("p",[_._v("与多级队列调度算法相比，其允许进程在"),t("strong",[_._v("队列之间")]),_._v("移动：若进程使用过多 "),t("code",[_._v("CPU")]),_._v(" 时间，那么它会被转移到更低的"),t("strong",[_._v("优先级队列")]),_._v("。")]),_._v(" "),t("p",[_._v("在较低优先级队列等待时间过长的进程会被转移到更高优先级队列，以防止饥饿发生。")]),_._v(" "),t("h2",{attrs:{id:"_9、页面调度算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、页面调度算法"}},[_._v("#")]),_._v(" 9、页面调度算法")]),_._v(" "),t("p",[t("strong",[_._v("FIFO 先进先出算法")]),_._v("：在操作系统中经常被用到，比如作业调度（主要实现简单，很容易想到）。")]),_._v(" "),t("p",[t("strong",[_._v("LRU(Least recently use)最近最少使用算法")]),_._v("：根据"),t("u",[_._v("开始使用时间到现在为止")]),_._v("的"),t("strong",[_._v("时间长短")]),_._v("来判断。")]),_._v(" "),t("p",[t("strong",[_._v("LFU(Least frequently use)最少使用次数算法")]),_._v("：根据"),t("strong",[_._v("使用次数")]),_._v("来判断。")]),_._v(" "),t("p",[t("strong",[_._v("OPT(Optimal replacement)最优置换算法")]),_._v("：理论的最优，所谓理论，就是要保证置换出去的是"),t("strong",[_._v("不再被使用的页")]),_._v("，或者是在实际内存中最晚使用的页。")]),_._v(" "),t("h2",{attrs:{id:"_10、局部性原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、局部性原理"}},[_._v("#")]),_._v(" 10、局部性原理")]),_._v(" "),t("p",[t("strong",[_._v("（1） 时间上的局部性")]),_._v("："),t("strong",[_._v("最近被访问的页")]),_._v("在不久的将来还会被访问。")]),_._v(" "),t("p",[t("strong",[_._v("（2）空间上的局部性")]),_._v("："),t("strong",[_._v("内存中被访问的页")]),_._v("周围的页也很可能被访问。")]),_._v(" "),t("h1",{attrs:{id:"🎻-三、结束语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🎻-三、结束语"}},[_._v("#")]),_._v(" 🎻 三、结束语")]),_._v(" "),t("p",[_._v("大家可以看到，对于操作系统的面试来说，基本上都在围绕着进程和线程这两个概念交谈。所以在学习的过程中，可以以这两个点来作为主线来对知识点进行扩充和归纳。")]),_._v(" "),t("p",[_._v("关于操作系统的面经归纳到这里就结束啦！希望对大家有帮助~")]),_._v(" "),t("h1",{attrs:{id:"🐣-彩蛋-one-more-thing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🐣-彩蛋-one-more-thing"}},[_._v("#")]),_._v(" 🐣 彩蛋 One More Thing")]),_._v(" "),t("h2",{attrs:{id:"🏷️pdf-内容获取"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏷️pdf-内容获取"}},[_._v("#")]),_._v(" 🏷️pdf 内容获取")]),_._v(" "),t("p",[_._v("👉 微信关注公众号 "),t("code",[_._v("星期一研究室")]),_._v(" ，回复关键字 "),t("code",[_._v("操作系统面试pdf")]),_._v(" 即可获取相关 "),t("code",[_._v("pdf")]),_._v(" 内容~")]),_._v(" "),t("p",[_._v("👉 回复 "),t("code",[_._v("面试大全pdf")]),_._v(" 可获取全专栏内容 📂")]),_._v(" "),t("h2",{attrs:{id:"🏷️-更新地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏷️-更新地址"}},[_._v("#")]),_._v(" 🏷️ 更新地址")]),_._v(" "),t("p",[_._v("👉 "),t("a",{attrs:{href:"https://juejin.cn/column/7007991853089849351",target:"_blank",rel:"noopener noreferrer"}},[_._v("offer 来了面试专栏"),t("OutboundLink")],1)]),_._v(" "),t("h2",{attrs:{id:"🏷️-番外篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#🏷️-番外篇"}},[_._v("#")]),_._v(" 🏷️ 番外篇")]),_._v(" "),t("ul",[t("li",[_._v("如果您觉得这篇文章有帮助到您的的话不妨点赞支持一下哟~~😉")]),_._v(" "),t("li",[_._v("以上就是本文的全部内容！我们下期见！👋👋👋")])])])}),[],!1,null,null,null);v.default=r.exports}}]);