(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{685:function(t,s,a){"use strict";a.r(s);var _=a(13),n=Object(_.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("在上一篇文章中，我们讲到了"),a("a",{attrs:{href:"https://blog.csdn.net/weixin_44803753/article/details/115395928",target:"_blank",rel:"noopener noreferrer"}},[t._v("黑盒测试"),a("OutboundLink")],1),t._v("。黑盒测试相较于白盒测试来说比较简单，不需要了解程序内部的代码，与软件的内部实现无关；而白盒测试就像是一个透明的盒子，它需要测试人员利用"),a("strong",[t._v("程序内部的逻辑结构")]),t._v("来设计测试用例，相对于黑盒测试来说会难一些。")]),t._v(" "),a("p",[t._v("在下面的这篇文章中，我们将讲解白盒测试的基本概念，以及四大常用的白盒测试方法。")]),t._v(" "),a("h1",{attrs:{id:"一、白盒测试基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、白盒测试基本概念"}},[t._v("#")]),t._v(" 一、白盒测试基本概念")]),t._v(" "),a("h2",{attrs:{id:"_1、白盒测试的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、白盒测试的定义"}},[t._v("#")]),t._v(" 1、白盒测试的定义")]),t._v(" "),a("p",[t._v("白盒测试又称为"),a("strong",[t._v("结构测试")]),t._v("或"),a("strong",[t._v("逻辑驱动测试")]),t._v("，它是把测试对象看成一个"),a("strong",[t._v("透明")]),t._v("的盒子，它允许测试人员利用程序"),a("strong",[t._v("内部的逻辑结构")]),t._v("设计测试用例，对程序所有逻辑路径进行测试。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125607452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"白盒测试"}})]),t._v(" "),a("h2",{attrs:{id:"_2、白盒测试的测试对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、白盒测试的测试对象"}},[t._v("#")]),t._v(" 2、白盒测试的测试对象")]),t._v(" "),a("p",[t._v("白盒测试的测试对象是基于被测试程序的"),a("strong",[t._v("源代码")]),t._v("，而不是软件的需求规格说明书。")]),t._v(" "),a("p",[t._v("使用白盒测试方法时，测试人员必须全面了解程序内部逻辑结构，检查程序的"),a("strong",[t._v("内部结构")]),t._v("，从检查程序的逻辑着手，对相关的逻辑路径进行测试，最后得出测试结果。")]),t._v(" "),a("h2",{attrs:{id:"_3、白盒测试的原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、白盒测试的原则"}},[t._v("#")]),t._v(" 3、白盒测试的原则")]),t._v(" "),a("p",[t._v("采用白盒测试方法必须遵循以下原则：")]),t._v(" "),a("ul",[a("li",[t._v("保证一个模块中的"),a("strong",[t._v("所有独立路径至少被测试一次")]),t._v("。")]),t._v(" "),a("li",[t._v("对所有的逻辑判定均需测试"),a("strong",[t._v("取真和取假")]),t._v("两种情况。")]),t._v(" "),a("li",[t._v("在上下边界及可操作范围内运行所有循环。")]),t._v(" "),a("li",[t._v("检查程序的内部数据结构，保证其结构的有效性。")])]),t._v(" "),a("h2",{attrs:{id:"_4、白盒测试的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、白盒测试的分类"}},[t._v("#")]),t._v(" 4、白盒测试的分类")]),t._v(" "),a("p",[t._v("白盒测试方法有两大类："),a("strong",[t._v("静态测试方法")]),t._v("和"),a("strong",[t._v("动态测试方法")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("静态测试：")]),t._v(" 不要求在计算机上实际执行所测试的程序，主要以一些人工的模拟技术对软件进行分析和测试，如"),a("strong",[t._v("代码检查法")]),t._v("、"),a("strong",[t._v("静态结构分析法")]),t._v("等；")]),t._v(" "),a("p",[a("strong",[t._v("动态测试：")]),t._v(" 是通过输入一组预先按照"),a("strong",[t._v("一定的测试准则")]),t._v("构造实际数据来动态运行程序，达到发现程序错误的过程。白盒测试中的动态分析技术主要有"),a("strong",[t._v("逻辑覆盖法")]),t._v("和"),a("strong",[t._v("基本路径测试法")]),t._v("。（ ★ ★ ★ ）")]),t._v(" "),a("p",[t._v("下面将对两种白盒测试方法进行讲解。")]),t._v(" "),a("h1",{attrs:{id:"二、静态白盒测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、静态白盒测试"}},[t._v("#")]),t._v(" 二、静态白盒测试")]),t._v(" "),a("h2",{attrs:{id:"_1、代码检查法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、代码检查法"}},[t._v("#")]),t._v(" 1、代码检查法")]),t._v(" "),a("h3",{attrs:{id:"_1-代码审查的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-代码审查的定义"}},[t._v("#")]),t._v(" （1）代码审查的定义")]),t._v(" "),a("p",[t._v("代码审查（Code Review）是指对"),a("strong",[t._v("计算机源代码")]),t._v("进行系统地审查，找出并修正在软件开发初期未发现的错误，提升软件质量及开发者的技术。")]),t._v(" "),a("h3",{attrs:{id:"_2-代码审查的目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-代码审查的目的"}},[t._v("#")]),t._v(" （2）代码审查的目的")]),t._v(" "),a("p",[t._v("代码审查的目的是"),a("strong",[t._v("为了产生合格的代码")]),t._v("，"),a("strong",[t._v("检查源程序编码是否符合详细设计的编码规定")]),t._v("，确保编码与设计的一致性和可追踪性。")]),t._v(" "),a("h3",{attrs:{id:"_3-代码审查的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码审查的方法"}},[t._v("#")]),t._v(" （3）代码审查的方法")]),t._v(" "),a("p",[t._v("代码审查包括"),a("strong",[t._v("桌面检查")]),t._v("、"),a("strong",[t._v("代码审查")]),t._v("和"),a("strong",[t._v("走查")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("1）桌面检查（程序员自己检查）")])]),t._v(" "),a("p",[t._v("这是一种"),a("strong",[t._v("传统的")]),t._v("检查方法，由程序员检查自己编写的程序。程序员在程序通过编译之后，对源程序代码进行分析、检查，并补充相关的文档，目的是发现程序中的错误。")]),t._v(" "),a("p",[a("strong",[t._v("2）代码审查（审查小组通过读程序和对照错误检查表进行检查）")])]),t._v(" "),a("p",[t._v("代码审查是由若干"),a("strong",[t._v("程序员")]),t._v("和"),a("strong",[t._v("测试员")]),t._v("组成一个审查小组，通过阅读、讨论和争议，对程序进行静态分析的过程。"),a("strong",[t._v("具体过程如下：")])]),t._v(" "),a("p",[a("strong",[t._v("第一步，")]),t._v(" 小组负责人提前把设计规格说明书、控制流程图、程序文本及有关要求、规范等分发给小组成员，作为审查的依据。小组成员在充分阅读这些材料后，进入审查的下一步。")]),t._v(" "),a("p",[a("strong",[t._v("第二步，召开程序审查会。")]),t._v(" 每个成员将所发材料作为审查依据，但是由程序员讲解程序的结构、逻辑和源程序。在此过程中，小组成员可以提出自己的疑问；程序员在讲解自己的程序时，也能发现自己原来没有注意到的问题。")]),t._v(" "),a("p",[a("strong",[t._v("注意：")]),t._v(" 在进行代码检查前应准备好需求文档、程序设计文档、程序的源代码清单、代码编码标准、代码缺陷检查表和流程图等。")]),t._v(" "),a("p",[a("strong",[t._v("3）走查 （审查小组需要准备有代表性的测试用例沿程序逻辑运行）")])]),t._v(" "),a("p",[t._v("走查与代码审查基本相同，"),a("strong",[t._v("其过程分为两步：")])]),t._v(" "),a("p",[a("strong",[t._v("第一步：")]),t._v(" 把材料先发给走查小组每个成员，让他们认真研究程序。")]),t._v(" "),a("p",[a("strong",[t._v("第二步：")]),t._v(" 开会。")]),t._v(" "),a("p",[t._v("与代码审查不同的是，让审查小组成员“充当”计算机，即首先由测试组成员为所测程序准备一批有代表性的测试用例，提交给走查小组。走查小组开会，集体扮演计算机角色，让测试用例沿着程序的逻辑运行一遍，随时记录程序的踪迹，提供给最后阶段的分析和讨论使用。")]),t._v(" "),a("h3",{attrs:{id:"_4-代码检查规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码检查规则"}},[t._v("#")]),t._v(" （4）代码检查规则")]),t._v(" "),a("p",[t._v("在代码检查中，需要依据被测试软件的特点，选用适当的"),a("strong",[t._v("标准")]),t._v("与"),a("strong",[t._v("规则规范")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125628247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"代码检查规则图"}})]),t._v(" "),a("h3",{attrs:{id:"_5-代码检查项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-代码检查项目"}},[t._v("#")]),t._v(" （5）代码检查项目")]),t._v(" "),a("ul",[a("li",[t._v("目录文件组织")]),t._v(" "),a("li",[t._v("检查函数")]),t._v(" "),a("li",[t._v("数据类型及变量")]),t._v(" "),a("li",[t._v("检查条件判断语句")]),t._v(" "),a("li",[t._v("检查循环体制")]),t._v(" "),a("li",[t._v("检查代码注释")]),t._v(" "),a("li",[t._v("桌面检查")]),t._v(" "),a("li",[t._v("其他检查")])]),t._v(" "),a("h2",{attrs:{id:"_2、静态结构分析法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、静态结构分析法"}},[t._v("#")]),t._v(" 2、静态结构分析法")]),t._v(" "),a("h3",{attrs:{id:"_1-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义"}},[t._v("#")]),t._v(" （1）定义")]),t._v(" "),a("p",[t._v("在静态结构分析法中，测试人员通常通过使用测试工具分析程序源代码的系统结构、数据结构、数据接口、内部控制逻辑等内部结构，"),a("strong",[t._v("生成函数调用关系图")]),t._v("、"),a("strong",[t._v("模块控制流图")]),t._v("、"),a("strong",[t._v("内部文件调用关系图")]),t._v("等各种图形、图表，清晰地标识整个软件的组成结构。")]),t._v(" "),a("h3",{attrs:{id:"_2-目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-目的"}},[t._v("#")]),t._v(" （2）目的")]),t._v(" "),a("p",[t._v("通过分析这些图表，包括控制流分析、数据流分析、接口分析、表达式分析等，使其便于阅读与理解，然后可以通过分析这些图表，检查软件有没有存在缺陷或错误。")]),t._v(" "),a("h3",{attrs:{id:"_3-静态结构分析的两种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-静态结构分析的两种方法"}},[t._v("#")]),t._v(" （3）静态结构分析的两种方法")]),t._v(" "),a("p",[a("strong",[t._v("1）通过生成各种图表，来帮助对源程序的静态分析")])]),t._v(" "),a("p",[a("strong",[t._v("常用的各种引用表主要有：")]),t._v(" "),a("strong",[t._v("①")]),t._v("标号交叉引用表；"),a("strong",[t._v("②")]),t._v("变量交叉引用表；"),a("strong",[t._v("③")]),t._v("子程序（宏、函数）引用表；"),a("strong",[t._v("④")]),t._v(" 等价表；"),a("strong",[t._v("⑤")]),t._v("常数表。")]),t._v(" "),a("p",[a("strong",[t._v("常用的各种关系图、控制流图主要有：")])]),t._v(" "),a("p",[a("strong",[t._v("① 函数调用关系图：")]),t._v(" 列出所有函数，用连线表示调用关系，通过应用程序各函数之间的调用关系展示了系统的结构。")]),t._v(" "),a("p",[a("strong",[t._v("② 模块控制流图：")]),t._v(" 由"),a("strong",[t._v("许多结点和连接结点的边")]),t._v("组成的图形，其中每个结点代表一条或多条语句，"),a("strong",[t._v("边表示节点间的控制流向")]),t._v("，用于"),a("strong",[t._v("显示函数的内部逻辑结构。")]),t._v("（★ ★ ★ ）")]),t._v(" "),a("p",[a("strong",[t._v("2) 错误静态分析")])]),t._v(" "),a("p",[t._v("静态错误分析主要用于确定在源程序中"),a("strong",[t._v("是否有某类错误或“危险”结构")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("① 类型和单位分析：")]),t._v(" 数据类型的错误和单位上的不一致。")]),t._v(" "),a("p",[a("strong",[t._v("② 引用分析：")]),t._v(" 引用异常，变量赋值先引用，或赋值未引用。")]),t._v(" "),a("p",[a("strong",[t._v("③ 表达式分析：")]),t._v(" 表达式错误，不正确使用括号，数组下标越界等。")]),t._v(" "),a("p",[a("strong",[t._v("④ 接口分析：")]),t._v(" 模块的接口，参数的一致性。")]),t._v(" "),a("h1",{attrs:{id:"三、动态白盒测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、动态白盒测试"}},[t._v("#")]),t._v(" 三、动态白盒测试")]),t._v(" "),a("h2",{attrs:{id:"_1、逻辑覆盖法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、逻辑覆盖法"}},[t._v("#")]),t._v(" 1、逻辑覆盖法")]),t._v(" "),a("h3",{attrs:{id:"_1-定义-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义-2"}},[t._v("#")]),t._v(" （1）定义")]),t._v(" "),a("p",[t._v("逻辑覆盖是"),a("strong",[t._v("以程序内部的逻辑结构为基础")]),t._v("来设计测试用例的测试技术，通过对程序内部的逻辑结构的遍历来实现程序的覆盖。它属于白盒测试中动态测试技术之一。")]),t._v(" "),a("h3",{attrs:{id:"_2-6-种逻辑覆盖方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-种逻辑覆盖方法"}},[t._v("#")]),t._v(" （2）6 种逻辑覆盖方法")]),t._v(" "),a("p",[t._v("从覆盖源程序语句的详尽程度分析，"),a("strong",[t._v("逻辑覆盖包括以下 6 种覆盖标准：")])]),t._v(" "),a("ul",[a("li",[t._v("语句覆盖（SC）；")]),t._v(" "),a("li",[t._v("判定覆盖（DC）；")]),t._v(" "),a("li",[t._v("条件覆盖（CC）；")]),t._v(" "),a("li",[t._v("判定-条件覆盖（CDC）；")]),t._v(" "),a("li",[t._v("条件组合覆盖（MCC）；")]),t._v(" "),a("li",[t._v("路径覆盖。")])]),t._v(" "),a("p",[t._v("接下来将对这 6 种逻辑覆盖方法进行一一讲解。")]),t._v(" "),a("h4",{attrs:{id:"_1-语句覆盖-sc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-语句覆盖-sc"}},[t._v("#")]),t._v(" 1）语句覆盖（SC）")]),t._v(" "),a("p",[a("strong",[t._v("① 定义：")]),t._v(" 语句覆盖(Statement Coverage)的含义就"),a("strong",[t._v("是设计足够的测试用例，使得被测程序中每条语句至少执行一次")]),t._v("。又称行覆盖、段覆盖、基本块覆盖，它是最常见的覆盖方式。")]),t._v(" "),a("p",[a("strong",[t._v("② 例子展示")]),t._v("🌰")]),t._v(" "),a("p",[a("strong",[t._v("Question：")])]),t._v(" "),a("p",[t._v("如下 C 语言程序语句和对应的程序流程图：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125645435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"语句覆盖"}})]),t._v(" "),a("p",[t._v("请使用"),a("strong",[t._v("语句覆盖")]),t._v("来为该程序设计测试用例。")]),t._v(" "),a("p",[a("strong",[t._v("Answer：")])]),t._v(" "),a("p",[t._v("为了使每条语句都能够至少执行一次，我们可以构造以下测试用例：")]),t._v(" "),a("p",[t._v("输入： "),a("code",[t._v("x=4")]),t._v(" , "),a("code",[t._v("y=2")]),t._v(" , "),a("code",[t._v("z=0")])]),t._v(" "),a("p",[t._v("执行路径为："),a("code",[t._v("sacbed")])]),t._v(" "),a("p",[t._v("语句覆盖虽然可以测试执行语句是否被执行到，但却"),a("strong",[t._v("无法测试程序中存在的逻辑错误")]),t._v("。因此，"),a("strong",[t._v("语句覆盖是一种弱覆盖")]),t._v("。")]),t._v(" "),a("p",[t._v("例如，如果上述程序中的第一个逻辑判断符号 "),a("code",[t._v("“&&”")]),t._v(" 误写了 "),a("code",[t._v("“||”")]),t._v(" ，使用测试用例同样可以覆盖 "),a("code",[t._v("sacbed")]),t._v(" 路径上的全部执行语句，但却无法发现错误。同样，如果第二个逻辑判断符号 "),a("code",[t._v("“||”")]),t._v(" 误写了 "),a("code",[t._v("“&&”")]),t._v(" ，使用同样的测试用例也可以执行 "),a("code",[t._v("sacbed")]),t._v(" 路径上的全部执行语句，但却无法发现上述逻辑错误。")]),t._v(" "),a("p",[a("strong",[t._v("③ 语句覆盖的目的：")])]),t._v(" "),a("p",[t._v("语句覆盖的目的是测试程序中的代码是否被执行，"),a("strong",[t._v("它只测试代码中的执行语句，这里的执行语句不包括头文件、注释、空行")]),t._v("等。")]),t._v(" "),a("p",[t._v("语句覆盖在多分支的程序中，只能覆盖"),a("strong",[t._v("某一条路径")]),t._v("，使得该路径中的每一个语句至少被执行一次，但"),a("strong",[t._v("不会考虑各种分支组合情况")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_2-判定覆盖-dc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-判定覆盖-dc"}},[t._v("#")]),t._v(" 2）判定覆盖（DC）")]),t._v(" "),a("p",[a("strong",[t._v("① 定义：")])]),t._v(" "),a("ul",[a("li",[t._v("判定覆盖(Decision Coverage)又称为"),a("strong",[t._v("分支覆盖")]),t._v("，其原则是"),a("strong",[t._v("设计足够的测试用例")]),t._v("，使得程序中每个判定语句的取真和取假分支"),a("strong",[t._v("至少被执行一次")]),t._v("。")]),t._v(" "),a("li",[t._v("除了双值的"),a("strong",[t._v("判定语句")]),t._v("外，还有"),a("strong",[t._v("多值判定语句")]),t._v("，如"),a("strong",[t._v("case 语句")]),t._v("，因此判定覆盖更一般的含义是："),a("strong",[t._v("使得每一个判定获得每一种可能的结果至少一次")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("② 例子展示")]),t._v("🌰")]),t._v(" "),a("p",[a("strong",[t._v("Question：")])]),t._v(" "),a("p",[t._v("如下 C 语言程序语句和对应的程序流程图：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125700682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"判定覆盖"}})]),t._v(" "),a("p",[t._v("请使用"),a("strong",[t._v("判定覆盖")]),t._v("来为该程序设计测试用例。")]),t._v(" "),a("p",[a("strong",[t._v("Answer：")])]),t._v(" "),a("p",[t._v("以上述代码为例，构造以下测试用例即可实现判定覆盖标准：")]),t._v(" "),a("p",[t._v("输入：① "),a("code",[t._v("x=1,y=3,z=0")]),t._v(" ，执行路径为 "),a("code",[t._v("sacbd")])]),t._v(" "),a("p",[t._v("（判断的结果分别为"),a("strong",[t._v("T，F")]),t._v("）")]),t._v(" "),a("p",[t._v("输入：② "),a("code",[t._v("x=3,y=1,z=1")]),t._v(" ，执行路径为 "),a("code",[t._v("sabed")])]),t._v(" "),a("p",[t._v("（判断的结果分别为"),a("strong",[t._v("F，T")]),t._v("）")]),t._v(" "),a("p",[t._v("上述两组测试用例不仅满足了判定覆盖，而且满足了语句覆盖，从这一点可以看出判定覆盖比语句覆盖更强一些。所以"),a("strong",[t._v("只要满足了判定覆盖就一定满足语句覆盖，反之则不然")]),t._v("。")]),t._v(" "),a("p",[t._v("判定覆盖仍然具有和语句覆盖一样无法发现逻辑判断符号 "),a("code",[t._v("“&&”")]),t._v(" 误写了 "),a("code",[t._v("“||”")]),t._v(" 的逻辑错误。")]),t._v(" "),a("p",[t._v("判定覆盖仅仅判断判定语句执行的最终结果而"),a("strong",[t._v("忽略每个条件的取值")]),t._v("，所以也属于"),a("strong",[t._v("弱覆盖")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_3-条件覆盖-cc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-条件覆盖-cc"}},[t._v("#")]),t._v(" 3）条件覆盖（CC）")]),t._v(" "),a("p",[a("strong",[t._v("① 定义：")])]),t._v(" "),a("p",[t._v("条件覆盖(Condition Coverage)指的是"),a("strong",[t._v("设计足够的测试用例")]),t._v("，使判定语句中的"),a("strong",[t._v("每个逻辑条件取真值与取假值至少出现一次")]),t._v("。")]),t._v(" "),a("p",[t._v("例如，对于判定语句 "),a("code",[t._v("if(a>1 OR c<0)")]),t._v(" 中存在 "),a("code",[t._v("a>1、c<0")]),t._v(" 两个逻辑条件，设计条件覆盖测试用例时，要保证 "),a("code",[t._v("a>1、c<0")]),t._v(" 的“真”、“假”值至少出现一次。")]),t._v(" "),a("p",[a("strong",[t._v("② 例子展示")]),t._v("🌰")]),t._v(" "),a("p",[a("strong",[t._v("Question：")])]),t._v(" "),a("p",[t._v("如下 C 语言程序语句和对应的程序流程图：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125724221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"条件覆盖"}})]),t._v(" "),a("p",[t._v("请使用"),a("strong",[t._v("条件覆盖")]),t._v("来为该程序设计测试用例。")]),t._v(" "),a("p",[a("strong",[t._v("Answer：")])]),t._v(" "),a("p",[t._v("要使程序中每个判断的每个条件都至少取真值、假值一次，我们可以构造以下测试用例：\n输入：① "),a("code",[t._v("x=1,y=2,z=0")]),t._v(" ，执行路径为 "),a("code",[t._v("sacbed")])]),t._v(" "),a("p",[t._v("（条件的结果分别为"),a("strong",[t._v("TTTF")]),t._v("）")]),t._v(" "),a("p",[t._v("输入：② "),a("code",[t._v("x=2,y=1,z=1")]),t._v(" ，执行路径为 "),a("code",[t._v("sabed")])]),t._v(" "),a("p",[t._v("（条件的结果分别为"),a("strong",[t._v("FFFT")]),t._v("）")]),t._v(" "),a("p",[t._v("从条件覆盖的测试用例可知，使用 2 个测试用例就达到了使每个逻辑条件取真值与取假值都至少出现了一次，但从测试用例的执行路径来看，"),a("strong",[t._v("条件分支覆盖的状态下仍旧不能满足判定覆盖")]),t._v("，即没有覆盖 "),a("code",[t._v("bd")]),t._v(" 这条路径。相比于语句覆盖与判定覆盖，条件覆盖达到了逻辑条件的最大覆盖率，但却不能保证判定覆盖。")]),t._v(" "),a("h4",{attrs:{id:"_4-判定-条件覆盖-cdc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-判定-条件覆盖-cdc"}},[t._v("#")]),t._v(" 4）判定-条件覆盖（CDC）")]),t._v(" "),a("p",[a("strong",[t._v("① 定义：")])]),t._v(" "),a("ul",[a("li",[t._v("要求设计足够的测试用例，使得判定语句中"),a("strong",[t._v("所有条件的可能取值至少出现一次")]),t._v("，同时，"),a("strong",[t._v("所有判定语句的可能结果也至少出现一次")]),t._v("。")]),t._v(" "),a("li",[t._v("例如，对于判定语句 "),a("code",[t._v("if(a>1 AND c<1)")]),t._v(" ，该判定语句有 "),a("code",[t._v("a>1、c<1")]),t._v(" 两个条件，则在设计测试用例时，要保证 "),a("code",[t._v("a>1、c<1")]),t._v(" 两个条件取“真”、“假”值至少一次，同时，判定语句 "),a("code",[t._v("if(a>1 AND c<1)")]),t._v(" 取“真”、“假”也至少出现一次。")])]),t._v(" "),a("p",[a("strong",[t._v("② 例子展示")]),t._v("🌰")]),t._v(" "),a("p",[a("strong",[t._v("Question：")])]),t._v(" "),a("p",[t._v("如下 C 语言程序语句和对应的程序流程图：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125737822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"判定条件覆盖"}})]),t._v(" "),a("p",[t._v("请使用"),a("strong",[t._v("判定条件覆盖")]),t._v("来为该程序设计测试用例。")]),t._v(" "),a("p",[a("strong",[t._v("Answer：")])]),t._v(" "),a("p",[t._v("为满足判定-条件覆盖原则，我们可以构造以下测试用例：")]),t._v(" "),a("p",[t._v("输入：① "),a("code",[t._v("x=4,y=2,z=0")]),t._v(" ，覆盖路径："),a("code",[t._v("sacbed")])]),t._v(" "),a("p",[t._v("（判断的结果分别为"),a("strong",[t._v("TT")]),t._v("，条件的结果分别为："),a("strong",[t._v("TTTT")]),t._v(" ）")]),t._v(" "),a("p",[t._v("输入：② "),a("code",[t._v("x=1,y=1,z=1")]),t._v(" ，覆盖路径："),a("code",[t._v("sabd")])]),t._v(" "),a("p",[t._v("（判断的结果分别为"),a("strong",[t._v("FF")]),t._v("，条件的结果分别为："),a("strong",[t._v("FFFF")]),t._v(" ）")]),t._v(" "),a("p",[t._v("判定-条件覆盖满足了"),a("strong",[t._v("判定覆盖准则")]),t._v("和"),a("strong",[t._v("条件覆盖准则")]),t._v("，弥补了二者的不足。但是判定-条件覆盖不一定比条件覆盖的逻辑更强。")]),t._v(" "),a("p",[a("strong",[t._v("③ 判定-条件覆盖的缺点：")]),t._v(" 没有考虑条件的组合情况。")]),t._v(" "),a("h4",{attrs:{id:"_5-条件组合覆盖-mcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-条件组合覆盖-mcc"}},[t._v("#")]),t._v(" 5）条件组合覆盖（MCC）")]),t._v(" "),a("p",[a("strong",[t._v("① 定义：")])]),t._v(" "),a("p",[t._v("条件组合(Multiple Condition Coverage)指的是设计足够的测试用例，使得"),a("strong",[t._v("每个判定中条件的各种可能组合都至少执行一次")]),t._v("。满足了判定覆盖、条件覆盖、判定-条件覆盖准则。")]),t._v(" "),a("p",[a("strong",[t._v("② 例子展示")]),t._v("🌰")]),t._v(" "),a("p",[a("strong",[t._v("Question：")])]),t._v(" "),a("p",[t._v("如下 C 语言程序语句和对应的程序流程图：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125750643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"条件组合覆盖"}})]),t._v(" "),a("p",[t._v("请使用"),a("strong",[t._v("条件组合覆盖")]),t._v("来为该程序设计测试用例。")]),t._v(" "),a("p",[a("strong",[t._v("Answer：")])]),t._v(" "),a("p",[t._v("为满足"),a("strong",[t._v("条件组合覆盖")]),t._v("原则，我们可以构造以下测试用例：\n输入：① "),a("code",[t._v("x=4,y=2,z=0")]),t._v(" ，覆盖路径： "),a("code",[t._v("sacbed")]),t._v("\n（条件的结果分别为："),a("strong",[t._v("TTTT")]),t._v(" ）")]),t._v(" "),a("p",[t._v("输入： ② "),a("code",[t._v("x=1,y=2,z=1")]),t._v("，覆盖路径： "),a("code",[t._v("sabed")]),t._v("\n（条件的结果分别为："),a("strong",[t._v("TFTF")]),t._v(" ）")]),t._v(" "),a("p",[t._v("输入：③ "),a("code",[t._v("x=2,y=1,z=0")]),t._v(" ，覆盖路径： "),a("code",[t._v("sabed")]),t._v("\n（条件的结果分别为："),a("strong",[t._v("FTFT")]),t._v(" ）")]),t._v(" "),a("p",[t._v("输入： ④ "),a("code",[t._v("x=1,y=1,z=1")]),t._v("，覆盖路径： "),a("code",[t._v("sabd")]),t._v("\n（条件的结果分别为："),a("strong",[t._v("FFFF")]),t._v(" ）")]),t._v(" "),a("p",[t._v("由于这 4 个条件每个条件都有取“真”、“假”两个值，因此所有条件结果的组合有"),a("strong",[t._v("2"),a("sup",[t._v("4")]),t._v("=16 种")]),t._v("。但是，当一个程序中判定语句较多时，其条件取值的组合数目也较多。需要设计的测试用例也会增加，这样反而会使测试效率降低。")]),t._v(" "),a("h4",{attrs:{id:"_6-路径覆盖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-路径覆盖"}},[t._v("#")]),t._v(" 6）路径覆盖")]),t._v(" "),a("p",[a("strong",[t._v("① 定义：")])]),t._v(" "),a("p",[t._v("路径覆盖指的是"),a("strong",[t._v("设计足够的测试用例")]),t._v("，使得程序中的"),a("strong",[t._v("每一条可能组合的路径都至少执行一次")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("② 例子展示")]),t._v("🌰")]),t._v(" "),a("p",[a("strong",[t._v("Question：")])]),t._v(" "),a("p",[t._v("如下 C 语言程序语句和对应的程序流程图：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125802467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"路径覆盖"}})]),t._v(" "),a("p",[t._v("请使用"),a("strong",[t._v("路径覆盖")]),t._v("来为该程序设计测试用例。")]),t._v(" "),a("p",[a("strong",[t._v("Answer：")])]),t._v(" "),a("p",[t._v("为满足路径覆盖原则，我们可以构造以下测试用例：\n输入：① "),a("code",[t._v("x=4,y=2,z=0")]),t._v(" ，覆盖路径："),a("code",[t._v("sacbed")])]),t._v(" "),a("p",[t._v("（判定的结果分别为："),a("strong",[t._v("TT")]),t._v(" ）")]),t._v(" "),a("p",[t._v("输入：② "),a("code",[t._v("x=1,y=2,z=1")]),t._v("，覆盖路径： "),a("code",[t._v("sabed")])]),t._v(" "),a("p",[t._v("（判定的结果分别为："),a("strong",[t._v("FT")]),t._v(" ）")]),t._v(" "),a("p",[t._v("输入：③ "),a("code",[t._v("x=1,y=3,z=0")]),t._v(" ，覆盖路径： "),a("code",[t._v("sacbd")])]),t._v(" "),a("p",[t._v("（判定的结果分别为："),a("strong",[t._v("TF")]),t._v(" ）")]),t._v(" "),a("p",[t._v("输入：④ "),a("code",[t._v("x=1,y=1,z=1")]),t._v(" ，覆盖路径： "),a("code",[t._v("sabd")])]),t._v(" "),a("p",[t._v("（判定的结果分别为："),a("strong",[t._v("FF")]),t._v(" ）")]),t._v(" "),a("h2",{attrs:{id:"_2、基本路径测试法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、基本路径测试法"}},[t._v("#")]),t._v(" 2、基本路径测试法")]),t._v(" "),a("h3",{attrs:{id:"_1-独立路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-独立路径"}},[t._v("#")]),t._v(" （1）独立路径")]),t._v(" "),a("p",[t._v("独立路径是指包括一组以前没有处理的的语句或条件的一条路径。")]),t._v(" "),a("p",[t._v("从控制流图来看，一条独立路径是至少包含一条在其他独立路径中"),a("strong",[t._v("从未有过的边")]),t._v("的路径。")]),t._v(" "),a("h3",{attrs:{id:"_2-程序控制流图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-程序控制流图"}},[t._v("#")]),t._v(" （2）程序控制流图")]),t._v(" "),a("p",[a("strong",[t._v("1）程序控制流图的定义")])]),t._v(" "),a("p",[t._v("控制流程图是描述"),a("strong",[t._v("程序控制流")]),t._v("的一种图示方式。"),a("strong",[t._v("（有向图）")])]),t._v(" "),a("p",[a("strong",[t._v("2）控制流图的两种图形符号")])]),t._v(" "),a("ul",[a("li",[t._v("图中的每一个圆圈称为流图的结点，表示一个或多个无分支的语句或源程序语句。")]),t._v(" "),a("li",[t._v("流图中的箭头称为边或连接，表示控制流线。")])]),t._v(" "),a("p",[a("strong",[t._v("3）程序控制流图的 5 种基本结构")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125812908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"程序控制流图的5种基本结构"}})]),t._v(" "),a("p",[a("strong",[t._v("4）程序控制流图的描述")])]),t._v(" "),a("ul",[a("li",[t._v("程序控制流图实际上可以看作是一种简化了的程序流程图。")]),t._v(" "),a("li",[t._v("在控制流图中，"),a("strong",[t._v("只关注程序的流程，不关心各个处理框的细节")]),t._v("。")]),t._v(" "),a("li",[t._v("因此，原来程序流程图中的各个"),a("strong",[t._v("处理框（包括语句框、判断框、输入/输出框等）"),a("strong",[t._v("都被简化为")]),t._v("结点")]),t._v("，一般用"),a("strong",[t._v("圆圈")]),t._v("表示，而原来程序流程图中的"),a("strong",[t._v("带有箭头的控制流")]),t._v("变成了控制流图中的"),a("strong",[t._v("有向边")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("5）举个栗子🌰")])]),t._v(" "),a("p",[t._v("下图是典型的程序流程图转换为相对应的流图。对（a）图所示的程序流程图进行简化，得到（b）图所示的流图。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125823748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"程序控制流图"}})]),t._v(" "),a("p",[a("strong",[t._v("6）注意事项")])]),t._v(" "),a("p",[t._v("在将程序流程图简化成控制流图时，应注意如下几点：")]),t._v(" "),a("ul",[a("li",[t._v("一组顺序结构可以映射为一个"),a("strong",[t._v("单一的结点")]),t._v("。")]),t._v(" "),a("li",[t._v("在选择多分支结构中分支的汇集处时，即使没有执行语句也应该添加一个"),a("strong",[t._v("汇聚结点")]),t._v("。")]),t._v(" "),a("li",[t._v("边和结点圈定的范围叫做"),a("strong",[t._v("区域")]),t._v("，当对区域计数时，"),a("strong",[t._v("图形外的区域也应记为一个区域（开放区域）")]),t._v(" 。")]),t._v(" "),a("li",[t._v("如果判断中的条件表达式是由多个逻辑运算符（OR，AND…）连接的复合条件表达式，则"),a("strong",[t._v("需要改为一系列"),a("u",[t._v("只有单个条件的嵌套")]),t._v("的判断")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"_3-软件复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-软件复杂度"}},[t._v("#")]),t._v(" （3）软件复杂度")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("软件复杂度")]),t._v("是指理解和处理软件的难易程度。")]),t._v(" "),a("li",[a("strong",[t._v("程序复杂度是软件度量的重要组成部分")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("度量方法：")]),t._v(" "),a("code",[t._v("McCabe")]),t._v(" 度量法（环路度量）")])]),t._v(" "),a("h3",{attrs:{id:"_4-程序复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-程序复杂度"}},[t._v("#")]),t._v(" （4）程序复杂度")]),t._v(" "),a("p",[t._v("环路复杂度又称为"),a("strong",[t._v("圈复杂度")]),t._v("，是一种为"),a("strong",[t._v("程序逻辑复杂度")]),t._v("提供定量尺度的软件度量。它可以提供程序基本路径集的"),a("strong",[t._v("独立路径数量")]),t._v("，这是确保所有语句至少执行一次的过程所必须的"),a("strong",[t._v("最少测试用例数")]),t._v("。常用于"),a("strong",[t._v("基本路径测试法")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_5-环路复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-环路复杂度"}},[t._v("#")]),t._v(" （5）环路复杂度")]),t._v(" "),a("p",[a("code",[t._v("McCabe")]),t._v(" 复杂性度量方式有如下三种：")]),t._v(" "),a("p",[t._v("V（G）= $\\begin{cases}\n区域数 \\\n边数-结点数+2 \\ 判定结点数+1\\ \\end{cases}$ ​ ⭐️⭐️⭐️")]),t._v(" "),a("p",[a("strong",[t._v("1）通过控制流图的区域个数来计算")])]),t._v(" "),a("p",[t._v("公式："),a("code",[t._v("V(G)＝区域数")])]),t._v(" "),a("p",[t._v("程序的环路复杂性为控制流图的区域数（即封闭的区域数+1）。")]),t._v(" "),a("p",[t._v("在下图中可以看到，有 "),a("code",[t._v("1")]),t._v(" 和 "),a("code",[t._v("2")]),t._v(" 两个封闭区域，因此，环路复杂度 V(G)＝ 2 + 1 = 3。")]),t._v(" "),a("p",[t._v("（２个封闭的区域＋１个开放区域）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125842432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"环路复杂度 1"}})]),t._v(" "),a("p",[a("strong",[t._v("2）通过控制流图的边数和结点数来计算")])]),t._v(" "),a("p",[t._v("公式："),a("code",[t._v("V(G) = e - n + 2")])]),t._v(" "),a("p",[t._v("其中， "),a("code",[t._v("e")]),t._v(" 即 "),a("code",[t._v("edge")]),t._v(" ，表示图中"),a("strong",[t._v("边的数目")]),t._v("； "),a("code",[t._v("n")]),t._v(" 即 "),a("code",[t._v("node")]),t._v(" ，表示"),a("strong",[t._v("结点个数")]),t._v("。")]),t._v(" "),a("p",[t._v("下图中 V(G)= e - n + 2 = ７条边 − ６个结点 + 2 = 3。")]),t._v(" "),a("p",[t._v("因此，环路复杂度 V(G)＝３。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125921381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"环路复杂度 2"}})]),t._v(" "),a("p",[a("strong",[t._v("3）通过控制流图中的判定结点个数来计算")])]),t._v(" "),a("p",[t._v("公式："),a("code",[t._v("V(G) = P + 1")])]),t._v(" "),a("p",[t._v("其中，P 表示判定结点的数目。所谓判定节点数，即有多个分支的节点，比如下图中的节点 "),a("code",[t._v("2")]),t._v(" ，它可以走 3 或者 5，这个时候它就需要做判断了。所以， "),a("code",[t._v("2")]),t._v(" 是一个判定节点。同样地，下面的 节点"),a("code",[t._v("3")]),t._v(" 也像节点 "),a("code",[t._v("2")]),t._v(" 一样分析。")]),t._v(" "),a("p",[t._v("因此，图中 V(G)=２个判定结点＋ 1 = 3，所以环路复杂度为３。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125932617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"环路复杂度 3"}})]),t._v(" "),a("p",[t._v("讲到这里，我们来给"),a("strong",[t._v("环路复杂性")]),t._v("做个小结。事实上，程序的环路复杂性给出了程序基本路径"),a("strong",[t._v("集中的独立路径条数")]),t._v("，这是确保可执行语句"),a("strong",[t._v("至少执行一次")]),a("u",[t._v("所必需的测试用例数目")]),t._v("的上界。")]),t._v(" "),a("p",[t._v("通过对以上三个例子的了解，相信大家对环路复杂度的三种求解方式有了一个新的认识。有了上面一系列内容的铺垫，我们来开始讲解"),a("strong",[t._v("基本路径测试法")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_4-基本路径测试法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-基本路径测试法"}},[t._v("#")]),t._v(" （4）基本路径测试法")]),t._v(" "),a("p",[a("strong",[t._v("1）基本路径测试法是什么")])]),t._v(" "),a("p",[t._v("路径测试就是从"),a("strong",[t._v("一个程序的入口")]),t._v("开始，执行所经历的各个语句的完整过程。"),a("strong",[t._v("从广义的角度讲")]),t._v("，任何有关路径分析的测试都可以被称为"),a("strong",[t._v("路径测试")]),t._v("。")]),t._v(" "),a("p",[t._v("完成路径测试的理想情况就是做到"),a("strong",[t._v("路径覆盖")]),t._v("，但对于复杂性较大的程序要做到所有的路径覆盖（测试所有可执行路径）是不可能的。")]),t._v(" "),a("p",[t._v("在不能做到所有路径覆盖的情况下，如果某一程序的"),a("strong",[t._v("每一个独立路径")]),t._v("都被执行到，那么就可以认为程序中的每个语句都已经检验过了，即达到了"),a("strong",[t._v("语句覆盖")]),t._v("。这种测试方法就是通常所说的"),a("strong",[t._v("基路径测试法")]),t._v("。")]),t._v(" "),a("p",[t._v("基本路径测试法是在程序控制流图的基础上，通过分析控制构造的环路复杂性，导出基本可执行路径的集合，从而设计测试用例的方法。设计出的测试用例要保证在测试中程序的每个可执行语句至少执行一次。")]),t._v(" "),a("p",[a("strong",[t._v("2）基本路径测试法的 4 个步骤")])]),t._v(" "),a("p",[t._v("基本路径测试法包括以下 4 个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("以"),a("strong",[t._v("详细设计")]),t._v("或"),a("strong",[t._v("源代码")]),t._v("作为基础，绘制程序的"),a("strong",[t._v("控制流图")]),t._v("。")]),t._v(" "),a("li",[t._v("计算得到的控制流图 G 的"),a("strong",[t._v("环路复杂性 V（G）")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("确定独立路径的集合")]),t._v("。通过程序控制流图导出基本路径集，列出程序的独立路径。所谓独立路径，是指至少包含一条新边的路径，也就是包含一些前面的路径未包含的语句，当所有的语句都包含了，基路径集就够了。"),a("strong",[t._v("（线性无关路径）")])]),t._v(" "),a("li",[a("strong",[t._v("设计测试用例")]),t._v("，确保基本路径集中每条路径的执行。")])]),t._v(" "),a("p",[a("strong",[t._v("3）例子阐述 1 🌰")])]),t._v(" "),a("p",[t._v("依据以下代码，用基本路径测试法，设计该程序的测试用例。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1,2")]),t._v("\n    m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4,5")]),t._v("\n   m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6")]),t._v("\n")])])]),a("p",[a("strong",[t._v("解答：")])]),t._v(" "),a("p",[a("strong",[t._v("① 绘制程序控制流图，如下图所示。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529125948568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"案例1控制流图"}})]),t._v(" "),a("p",[a("strong",[t._v("② 计算环路复杂度")])]),t._v(" "),a("p",[t._v("V(G)=4（3 个封闭区域+1 个开放区域）")]),t._v(" "),a("p",[a("strong",[t._v("③ 确定线性无关路径：")])]),t._v(" "),a("p",[t._v("路径 1："),a("code",[t._v("1、4、6")])]),t._v(" "),a("p",[t._v("路径 2："),a("code",[t._v("1、4、5、6")])]),t._v(" "),a("p",[t._v("路径 3："),a("code",[t._v("1、2、4、5、6")])]),t._v(" "),a("p",[t._v("路径 4："),a("code",[t._v("1、2、3、4、5、6")])]),t._v(" "),a("p",[a("strong",[t._v("④ 设计测试用例")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("编号")])]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("输入数据")])]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("预期输出")])]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("覆盖路径")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("a=2,b=3,c=4")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("m=0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1、4、6")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("a=2,b=3,c=8")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("m=5")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1、4、5、6")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("a=10,b=6,c=8")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("m=5")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1、2、4、5、6")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("a=10,b=15,c=8")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("m=6")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1、2、3、4、5、6")])])])]),t._v(" "),a("p",[a("strong",[t._v("4）例子阐述 2 🌰")])]),t._v(" "),a("p",[t._v("依据以下代码，用基本路径测试法，设计该程序的测试用例。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("permute_args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" panonopt_start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" panonopt_end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" opt_eng"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ncycle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cstart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cycle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nnonopts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nopts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n\n    nnonopts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" panonopt_end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" panonopt_start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nopts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" opt_end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" panonopt_end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cyclelen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opt_end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" panonopt_start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("ncycle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" ncycle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n        cstart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" panonopt_end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n        pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cstart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" cyclelen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" panonopt_end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5")]),t._v("\n                pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" nnonopts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//6")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" nopts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//7")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//8")]),t._v("\n")])])]),a("p",[t._v("【问题 1】请针对上述 C 程序给出满足 100%DC（判定覆盖）所需的逻辑条件。")]),t._v(" "),a("p",[t._v("【问题 2】请画出上述程序的控制流图，并计算其控制流图的环路复杂度 V(G)。")]),t._v(" "),a("p",[t._v("【问题 3】请给出问题 2 种控制流图的线性无关路径。")]),t._v(" "),a("p",[a("strong",[t._v("解答：")])]),t._v(" "),a("p",[a("strong",[t._v("【问题 1】")])]),t._v(" "),a("p",[t._v("满足 100%判定的逻辑条件为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("i<ncycle;\ni>=ncycle;\nj<cyclelen;\nj>=yclelen;\npos>=panonopt_end;\npos<panonopt_end;\n")])])]),a("p",[a("strong",[t._v("【问题 2】")])]),t._v(" "),a("p",[t._v("控制流图如下图所示，V(G)=4。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210529130008154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgwMzc1Mw==,size_16,color_FFFFFF,t_70#pic_center",alt:"案例2控制流图"}})]),t._v(" "),a("p",[a("strong",[t._v("【问题 3】")])]),t._v(" "),a("p",[t._v("线性无关路径：")]),t._v(" "),a("p",[t._v("路径 1："),a("code",[t._v("1、2、8")])]),t._v(" "),a("p",[t._v("路径 2："),a("code",[t._v("1、2、3、4、2…")])]),t._v(" "),a("p",[t._v("路径 3："),a("code",[t._v("1、2、3、4、5、6、4…")])]),t._v(" "),a("p",[t._v("路径 4："),a("code",[t._v("1、2、3、4、5、7、4…")])]),t._v(" "),a("h1",{attrs:{id:"四、写在最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、写在最后"}},[t._v("#")]),t._v(" 四、写在最后")]),t._v(" "),a("p",[t._v("🙋🙋🙋")]),t._v(" "),a("p",[t._v("对于软件测试中的白盒测试来说，主要需要了解白盒测试的基本概念，静态和动态白盒测试的方法，内容较黑盒测试来说逻辑性会更强一些。同时，值得注意的是，在动态测试中的基本路径测试法中，线性无关路径的识别要尤为小心，在计算过程中很容易出现多写的问题。因此，在此基础上，大家可以再多找几道相关的题目进行练习，举一反三。")]),t._v(" "),a("p",[t._v("白盒测试的内容就讲到这里啦！如有需要了解软件测试相关的其他内容，可到『"),a("a",{attrs:{href:"https://blog.csdn.net/weixin_44803753/category_10923158.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("软件测试"),a("OutboundLink")],1),t._v("』栏目进行查看学习~")]),t._v(" "),a("p",[t._v("同时，有不理解或有误的地方也欢迎评论区评论或私信我交流~")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("关注公众号 "),a("strong",[t._v("星期一研究室")]),t._v(" ，不定期分享学习干货，学习路上不迷路~")]),t._v(" "),a("li",[t._v("如果这篇文章对你有用，记得"),a("strong",[t._v("点个赞加个关注")]),t._v("再走哦~")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);